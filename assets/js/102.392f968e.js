(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{447:function(a,t,s){"use strict";s.r(t);var r=s(42),n=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("前两天被人问到这样一个问题:")]),a._v(" "),s("p",[a._v("“松哥，为什么我的 Spring Boot 项目打包成的 jar ，被其他项目依赖之后，总是报找不到类的错误？”")]),a._v(" "),s("p",[a._v("大伙有这样的疑问，就是因为还没搞清楚可执行 jar 和普通 jar 到底有什么区别？今天松哥就和大家来聊一聊这个问题。")]),a._v(" "),s("h2",{attrs:{id:"多了一个插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多了一个插件"}},[a._v("#")]),a._v(" 多了一个插件")]),a._v(" "),s("p",[a._v("Spring Boot 中默认打包成的 jar 叫做 可执行 jar，这种 jar 不同于普通的 jar，普通的 jar 不可以通过 "),s("code",[a._v("java -jar xxx.jar")]),a._v(" 命令执行，普通的 "),s("code",[a._v("jar")]),a._v(" 主要是被其他应用依赖，"),s("code",[a._v("Spring Boot")]),a._v(" 打成的 "),s("code",[a._v("jar")]),a._v(" 可以执行，但是不可以被其他的应用所依赖，即使强制依赖，也无法获取里边的类。但是可执行 jar 并不是 Spring Boot 独有的，Java 工程本身就可以打包成可执行 jar 。")]),a._v(" "),s("p",[a._v("有的小伙伴可能就有疑问了，既然同样是执行 "),s("code",[a._v("mvn package")]),a._v(" 命令进行项目打包，为什么 Spring Boot 项目就打成了可执行 jar ，而普通项目则打包成了不可执行 jar 呢？")]),a._v(" "),s("p",[a._v("这我们就不得不提 Spring Boot 项目中一个默认的插件配置 "),s("code",[a._v("spring-boot-maven-plugin")]),a._v(" ，这个打包插件存在 5 个方面的功能，从插件命令就可以看出：")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://www.javaboy.org/images/boot2/40-1.png",alt:""}})]),a._v(" "),s("p",[a._v("五个功能分别是：")]),a._v(" "),s("ul",[s("li",[a._v("build-info：生成项目的构建信息文件 build-info.properties")]),a._v(" "),s("li",[a._v("repackage：这个是默认 goal，在 "),s("code",[a._v("mvn package")]),a._v(" 执行之后，这个命令再次打包生成可执行的 jar，同时将 "),s("code",[a._v("mvn package")]),a._v(" 生成的 jar 重命名为 "),s("code",[a._v("*.origin")])]),a._v(" "),s("li",[a._v("run：这个可以用来运行 Spring Boot 应用")]),a._v(" "),s("li",[a._v("start：这个在 "),s("code",[a._v("mvn integration-test")]),a._v(" 阶段，进行 "),s("code",[a._v("Spring Boot")]),a._v(" 应用生命周期的管理")]),a._v(" "),s("li",[a._v("stop：这个在 "),s("code",[a._v("mvn integration-test")]),a._v(" 阶段，进行 "),s("code",[a._v("Spring Boot")]),a._v(" 应用生命周期的管理")])]),a._v(" "),s("p",[a._v("这里功能，默认情况下使用就是 repackage 功能，其他功能要使用，则需要开发者显式配置。")]),a._v(" "),s("h2",{attrs:{id:"打包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#打包"}},[a._v("#")]),a._v(" 打包")]),a._v(" "),s("p",[a._v("repackage 功能的 作用，就是在打包的时候，多做一点额外的事情：")]),a._v(" "),s("ol",[s("li",[a._v("首先 "),s("code",[a._v("mvn package")]),a._v(" 命令 对项目进行打包，打成一个 "),s("code",[a._v("jar")]),a._v("，这个 "),s("code",[a._v("jar")]),a._v(" 就是一个普通的 "),s("code",[a._v("jar")]),a._v("，可以被其他项目依赖，但是不可以被执行")]),a._v(" "),s("li",[s("code",[a._v("repackage")]),a._v(" 命令，对第一步 打包成的 "),s("code",[a._v("jar")]),a._v(" 进行再次打包，将之打成一个 可执行 "),s("code",[a._v("jar")]),a._v(" ，通过将第一步打成的 "),s("code",[a._v("jar")]),a._v(" 重命名为 "),s("code",[a._v("*.original")]),a._v(" 文件")])]),a._v(" "),s("p",[a._v("举个例子：")]),a._v(" "),s("p",[a._v("对任意一个 Spring Boot 项目进行打包，可以执行 "),s("code",[a._v("mvn package")]),a._v(" 命令，也可以直接在 "),s("code",[a._v("IDEA")]),a._v(" 中点击 "),s("code",[a._v("package")]),a._v(" ，如下 ：")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://www.javaboy.org/images/boot2/40-2.png",alt:""}})]),a._v(" "),s("p",[a._v("打包成功之后， "),s("code",[a._v("target")]),a._v(" 中的文件如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://www.javaboy.org/images/boot2/40-3.png",alt:""}})]),a._v(" "),s("p",[a._v("这里有两个文件，第一个 "),s("code",[a._v("restful-0.0.1-SNAPSHOT.jar")]),a._v(" 表示打包成的可执行 "),s("code",[a._v("jar")]),a._v(" ，第二个 "),s("code",[a._v("restful-0.0.1-SNAPSHOT.jar.original")]),a._v(" 则是在打包过程中 ，被重命名的 "),s("code",[a._v("jar")]),a._v("，这是一个不可执行 "),s("code",[a._v("jar")]),a._v("，但是可以被其他项目依赖的 "),s("code",[a._v("jar")]),a._v("。通过对这两个文件的解压，我们可以看出这两者之间的差异。")]),a._v(" "),s("h2",{attrs:{id:"两种-jar-的比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两种-jar-的比较"}},[a._v("#")]),a._v(" 两种 jar 的比较")]),a._v(" "),s("p",[a._v("可执行 "),s("code",[a._v("jar")]),a._v(" 解压之后，目录如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://www.javaboy.org/images/boot2/40-4.png",alt:""}})]),a._v(" "),s("p",[a._v("可以看到，可执行 jar 中，我们自己的代码是存在 于 "),s("code",[a._v("BOOT-INF/classes/")]),a._v(" 目录下，另外，还有一个 "),s("code",[a._v("META-INF")]),a._v(" 的目录，该目录下有一个 "),s("code",[a._v("MANIFEST.MF")]),a._v(" 文件，打开该文件，内容如下：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Manifest-Version: 1.0\nImplementation-Title: restful\nImplementation-Version: 0.0.1-SNAPSHOT\nStart-Class: org.javaboy.restful.RestfulApplication\nSpring-Boot-Classes: BOOT-INF/classes/\nSpring-Boot-Lib: BOOT-INF/lib/\nBuild-Jdk-Spec: 1.8\nSpring-Boot-Version: 2.1.6.RELEASE\nCreated-By: Maven Archiver 3.4.0\nMain-Class: org.springframework.boot.loader.JarLauncher\n")])])]),s("p",[a._v("可以看到，这里定义了一个 "),s("code",[a._v("Start-Class")]),a._v("，这就是可执行 "),s("code",[a._v("jar")]),a._v(" 的入口类，"),s("code",[a._v("Spring-Boot-Classes")]),a._v(" 表示我们自己代码编译后的位置，"),s("code",[a._v("Spring-Boot-Lib")]),a._v(" 则表示项目依赖的 "),s("code",[a._v("jar")]),a._v(" 的位置。")]),a._v(" "),s("p",[a._v("换句话说，如果自己要打一个可执行 "),s("code",[a._v("jar")]),a._v(" 包的话，除了添加相关依赖之外，还需要配置 "),s("code",[a._v("META-INF/MANIFEST.MF")]),a._v(" 文件。")]),a._v(" "),s("p",[a._v("这是可执行 jar 的结构，那么不可执行 jar 的结构呢？")]),a._v(" "),s("p",[a._v("我们首先将默认的后缀 "),s("code",[a._v(".original")]),a._v(" 除去，然后给文件重命名，重命名完成，进行解压：")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://www.javaboy.org/images/boot2/40-5.png",alt:""}})]),a._v(" "),s("p",[a._v("解压后可以看到，不可执行 "),s("code",[a._v("jar")]),a._v(" 根目录就相当于我们的 "),s("code",[a._v("classpath")]),a._v("，解压之后，直接就能看到我们的代码，它也有 "),s("code",[a._v("META-INF/MANIFEST.MF")]),a._v(" 文件，但是文件中没有定义启动类等。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Manifest-Version: 1.0\nImplementation-Title: restful\nImplementation-Version: 0.0.1-SNAPSHOT\nBuild-Jdk-Spec: 1.8\nCreated-By: Maven Archiver 3.4.0\n")])])]),s("p",[s("strong",[a._v("注意")])]),a._v(" "),s("p",[a._v("这个不可以执行 "),s("code",[a._v("jar")]),a._v(" 也没有将项目的依赖打包进来。")]),a._v(" "),s("p",[a._v("从这里我们就可以看出，两个 "),s("code",[a._v("jar")]),a._v(" ，虽然都是 "),s("code",[a._v("jar")]),a._v(" 包，但是内部结构是完全不同的，因此一个可以直接执行，另一个则可以被其他项目依赖。")]),a._v(" "),s("h2",{attrs:{id:"一次打包两个-jar"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一次打包两个-jar"}},[a._v("#")]),a._v(" 一次打包两个 jar")]),a._v(" "),s("p",[a._v("一般来说，Spring Boot 直接打包成可执行 "),s("code",[a._v("jar")]),a._v(" 就可以了，不建议将 Spring Boot 作为普通的 "),s("code",[a._v("jar")]),a._v(" 被其他的项目所依赖。如果有这种需求，建议将被依赖的部分，单独抽出来做一个普通的 "),s("code",[a._v("Maven")]),a._v(" 项目，然后在 Spring Boot 中引用这个 "),s("code",[a._v("Maven")]),a._v(" 项目。")]),a._v(" "),s("p",[a._v("如果非要将 Spring Boot 打包成一个普通 "),s("code",[a._v("jar")]),a._v(" 被其他项目依赖，技术上来说，也是可以的，给 "),s("code",[a._v("spring-boot-maven-plugin")]),a._v(" 插件添加如下配置：")]),a._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("plugins")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("plugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("org.springframework.boot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("spring-boot-maven-plugin"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("configuration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("classifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("exec"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("classifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("configuration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("plugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("plugins")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),s("p",[a._v("配置的 "),s("code",[a._v("classifier")]),a._v(" 表示可执行 "),s("code",[a._v("jar")]),a._v(" 的名字，配置了这个之后，在插件执行 "),s("code",[a._v("repackage")]),a._v(" 命令时，就不会给 "),s("code",[a._v("mvn package")]),a._v(" 所打成的 "),s("code",[a._v("jar")]),a._v(" 重命名了，所以，打包后的 jar 如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"http://www.javaboy.org/images/boot2/40-6.png",alt:""}})]),a._v(" "),s("p",[a._v("第一个 jar 表示可以被其他项目依赖的 jar ，第二个 jar 则表示一个可执行 jar。")]),a._v(" "),s("p",[a._v("好了，关于 Spring Boot 中 jar 的问题，我们就说这么多，有问题欢迎留言讨论。")])])}),[],!1,null,null,null);t.default=n.exports}}]);