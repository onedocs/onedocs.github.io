(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{429:function(a,t,e){"use strict";e.r(t);var s=e(42),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[a._v("前面文章我们介绍了 STRING 的基本命令，本文我们来看看 Redis 中的列表与集合。")]),a._v(" "),e("p",[a._v("本文是 Redis 系列的第五篇文章，了解前面的文章有助于更好的理解本文：")]),a._v(" "),e("hr"),a._v(" "),e("p",[a._v("1."),e("a",{attrs:{href:"https://mp.weixin.qq.com/s/NCm3zNGIDVMnlykeOiaH7Q",target:"_blank",rel:"noopener noreferrer"}},[a._v("Linux 上安装 Redis"),e("OutboundLink")],1),e("br"),a._v("\n2."),e("a",{attrs:{href:"http://mp.weixin.qq.com/s/jNSN8YO4jZbyjKR5C4in_w",target:"_blank",rel:"noopener noreferrer"}},[a._v("Redis 中的五种数据类型简介"),e("OutboundLink")],1),e("br"),a._v("\n3."),e("a",{attrs:{href:"https://mp.weixin.qq.com/s/Svvgwo_a92vNdCSazbzKRQ",target:"_blank",rel:"noopener noreferrer"}},[a._v("Redis 字符串 (STRING) 介绍"),e("OutboundLink")],1),e("br"),a._v("\n4."),e("a",{attrs:{href:"http://mp.weixin.qq.com/s/OGUnTBmdErvZ8r_yoyg_rQ",target:"_blank",rel:"noopener noreferrer"}},[a._v("Redis 字符串 (STRING) 中 BIT 相关命令"),e("OutboundLink")],1)]),a._v(" "),e("hr"),a._v(" "),e("h2",{attrs:{id:"列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#列表"}},[a._v("#")]),a._v(" 列表")]),a._v(" "),e("p",[a._v("列表是 Redis 中另外一种数据类型。下面我们来看看列表中一些基本的操作命令。")]),a._v(" "),e("h3",{attrs:{id:"lpush"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lpush"}},[a._v("#")]),a._v(" LPUSH")]),a._v(" "),e("p",[a._v("将一个或多个值 value 插入到列表 key 的表头，如果有多个 value 值，那么各个 value 值按从左到右的顺序依次插入到表头，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("127.0.0.1:6379> LPUSH k1 v1 v2 v3\n(integer) 3\n")])])]),e("h3",{attrs:{id:"lrange"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lrange"}},[a._v("#")]),a._v(" LRANGE")]),a._v(" "),e("p",[a._v("返回列表 key 中指定区间内的元素，区间以偏移量 start 和 stop 指定，下标 (index) 参数 start 和 stop 都以 0 为底，即 0 表示列表的第一个元素，1 表示列表的第二个元素，以此类推。我们也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> LRANGE k1 0 -1\n1) "v3"\n2) "v2"\n3) "v1"\n')])])]),e("h3",{attrs:{id:"rpush"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rpush"}},[a._v("#")]),a._v(" RPUSH")]),a._v(" "),e("p",[a._v("RPUSH 与 LPUSH 的功能基本一致，不同的是 RPUSH 的中的 value 值是按照从右到左的顺序依次插入，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> RPUSH k2 1 2 3 4 5\n(integer) 5\n127.0.0.1:6379> LRANGE k2 0 -1\n1) "1"\n2) "2"\n3) "3"\n4) "4"\n5) "5"\n')])])]),e("h3",{attrs:{id:"rpop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rpop"}},[a._v("#")]),a._v(" RPOP")]),a._v(" "),e("p",[a._v("RPOP 命令可以移除并返回列表 key 的尾元素。如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> RPOP k2\n"5"\n127.0.0.1:6379> LRANGE k2 0 -1\n1) "1"\n2) "2"\n3) "3"\n4) "4"\n')])])]),e("h3",{attrs:{id:"lpop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lpop"}},[a._v("#")]),a._v(" LPOP")]),a._v(" "),e("p",[a._v("LPOP 和 RPOP 类似，不同的是 LPOP 移除并返回列表 key 的头元素，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> LPOP k2\n"1"\n127.0.0.1:6379> LRANGE k2 0 -1\n1) "2"\n2) "3"\n3) "4"\n')])])]),e("h3",{attrs:{id:"lindex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lindex"}},[a._v("#")]),a._v(" LINDEX")]),a._v(" "),e("p",[a._v("LINDEX 命令可以返回列表 key 中，下标为 index 的元素，正数下标 0 表示第一个元素，也可以使用负数下标，-1 表示倒数第一个元素，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> LINDEX k2 0\n"2"\n127.0.0.1:6379> LINDEX k2 -1\n"4"\n')])])]),e("h3",{attrs:{id:"ltrim"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ltrim"}},[a._v("#")]),a._v(" LTRIM")]),a._v(" "),e("p",[a._v("LTRIM 命令可以对一个列表进行修剪，即让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。下标与之前介绍的写法都一致，这里不赘述。如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> LRANGE k1 0 -1\n1) "v3"\n2) "v2"\n3) "v1"\n127.0.0.1:6379> LTRIM k1 0 1\nOK\n127.0.0.1:6379> LRANGE k1 0 -1\n1) "v3"\n2) "v2"\n')])])]),e("h3",{attrs:{id:"blpop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#blpop"}},[a._v("#")]),a._v(" BLPOP")]),a._v(" "),e("p",[a._v("BLPOP 是阻塞式列表的弹出原语。它是命令 LPOP 的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞。当给定多个 key 参数时，按参数 key 的先后顺序依次检查各个列表，弹出第一个非空列表的头元素。同时，在使用该命令时也需要指定阻塞的时长，时长单位为秒，在该时长内如果没有元素可供弹出，则阻塞结束。返回的结果是 key 和 value 的组合，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> BLPOP k1 10\n1) "k1"\n2) "v2"\n127.0.0.1:6379> BLPOP k1 10\n(nil)\n(10.03s)\n')])])]),e("p",[a._v("最后，BRPOP、BPOPLPUSH、BRPOPLPUSH 都是相应命令的阻塞版本，这里就不赘述了。")]),a._v(" "),e("h2",{attrs:{id:"集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[a._v("#")]),a._v(" 集合")]),a._v(" "),e("p",[a._v("接下来我们来看看集合中一些常见的操作命令：")]),a._v(" "),e("h3",{attrs:{id:"sadd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sadd"}},[a._v("#")]),a._v(" SADD")]),a._v(" "),e("p",[a._v("SADD 命令可以添加一个或多个指定的 member 元素到集合的 key 中，指定的一个或者多个元素 member 如果已经在集合 key 中存在则忽略，如果集合 key 不存在，则新建集合 key ,并添加 member 元素到集合 key 中。如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("127.0.0.1:6379> SADD k1 v1 v2 v3 v4\n(integer) 4\n")])])]),e("h3",{attrs:{id:"srem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#srem"}},[a._v("#")]),a._v(" SREM")]),a._v(" "),e("p",[a._v("SREM 命令可以在 key 集合中移除指定的元素，如果指定的元素不是 key 集合中的元素则忽略。如果 key 集合不存在则被视为一个空的集合，该命令返回 0 。如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("127.0.0.1:6379> SREM k1 v2\n(integer) 1\n127.0.0.1:6379> SREM k1 v10\n(integer) 0\n")])])]),e("h3",{attrs:{id:"sismember"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sismember"}},[a._v("#")]),a._v(" SISMEMBER")]),a._v(" "),e("p",[a._v("SISMEMBER 命令可以返回成员 member 是否是存储的集合 key 的成员。如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("127.0.0.1:6379> SISMEMBER k1 v3\n(integer) 1\n")])])]),e("h3",{attrs:{id:"scard"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scard"}},[a._v("#")]),a._v(" SCARD")]),a._v(" "),e("p",[a._v("SCARD 命令可以返回集合存储的 key 的基数(集合元素的数量)，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("127.0.0.1:6379> SCARD k1\n(integer) 3\n")])])]),e("h3",{attrs:{id:"smembers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#smembers"}},[a._v("#")]),a._v(" SMEMBERS")]),a._v(" "),e("p",[a._v("SMEMBERS 命令可以返回 key 集合所有的元素，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> SMEMBERS k1\n1) "v4"\n2) "v1"\n3) "v3"\n')])])]),e("h3",{attrs:{id:"srandmember"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#srandmember"}},[a._v("#")]),a._v(" SRANDMEMBER")]),a._v(" "),e("p",[a._v("SRANDMEMBER 仅需我们提供 key 参数,它就会随机返回 key 集合中的一个元素，从 Redis2.6 开始,该命令也可以接受一个可选的 count 参数,如果 count 是整数且小于元素的个数，则返回 count 个随机元素,如果 count 是整数且大于集合中元素的个数时,则返回集合中的所有元素,当 count 是负数,则会返回一个包含 count 的绝对值的个数元素的数组，如果 count 的绝对值大于元素的个数,则返回的结果集里会出现一个元素出现多次的情况。如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> SRANDMEMBER k1\n"v4"\n127.0.0.1:6379> SRANDMEMBER k1 2\n1) "v4"\n2) "v1"\n127.0.0.1:6379> SRANDMEMBER k1 5\n1) "v4"\n2) "v1"\n3) "v3"\n127.0.0.1:6379> SRANDMEMBER k1 -1\n1) "v4"\n127.0.0.1:6379> SRANDMEMBER k1 -5\n1) "v3"\n2) "v1"\n3) "v1"\n4) "v3"\n5) "v3"\n')])])]),e("h3",{attrs:{id:"spop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spop"}},[a._v("#")]),a._v(" SPOP")]),a._v(" "),e("p",[a._v("SPOP 命令的用法和 SRANDMEMBER 类似，不同的是，SPOP 每次选择一个随机的元素之后，该元素会出栈，而 SRANDMEMBER 则不会出栈，只是将该元素展示出来。")]),a._v(" "),e("h3",{attrs:{id:"smove"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#smove"}},[a._v("#")]),a._v(" SMOVE")]),a._v(" "),e("p",[a._v("SMOVE 命令可以将 member 从 source 集合移动到 destination 集合中，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> SMOVE k1 k2 v1\n(integer) 1\n127.0.0.1:6379> SMEMBERS k1\n1) "v4"\n2) "v3"\n127.0.0.1:6379> SMEMBERS k2\n1) "v1"\n')])])]),e("h3",{attrs:{id:"sdiff"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sdiff"}},[a._v("#")]),a._v(" SDIFF")]),a._v(" "),e("p",[a._v("SDIFF 可以用来返回一个集合与给定集合的差集的元素，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> SDIFF k1 k2\n1) "v4"\n2) "v3"\n')])])]),e("p",[a._v("k1 中的元素是 v3、v4，k2 中的元素是 v1，差集就是 v3、v4.")]),a._v(" "),e("h3",{attrs:{id:"sdiffstore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sdiffstore"}},[a._v("#")]),a._v(" SDIFFSTORE")]),a._v(" "),e("p",[a._v("SDIFFSTORE 命令与 SDIFF 命令基本一致，不同的是 SDIFFSTORE 命令会将结果保存在一个集合中，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> SDIFFSTORE key k1 k2\n(integer) 2\n127.0.0.1:6379> SMEMBERS key\n1) "v4"\n2) "v3"\n')])])]),e("h3",{attrs:{id:"sinter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sinter"}},[a._v("#")]),a._v(" SINTER")]),a._v(" "),e("p",[a._v("SINTER 命令可以用来计算指定 key 之间元素的交集，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> SMEMBERS k1\n1) "v4"\n2) "v3"\n127.0.0.1:6379> SMEMBERS k2\n1) "v1"\n2) "v3"\n127.0.0.1:6379> SINTER k1 k2\n1) "v3"\n')])])]),e("h3",{attrs:{id:"sinterstore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sinterstore"}},[a._v("#")]),a._v(" SINTERSTORE")]),a._v(" "),e("p",[a._v("SINTERSTORE 命令和 SINTER 命令类似，不同的是它会将结果保存到一个新的集合中，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> SINTERSTORE k3 k1 k2\n(integer) 1\n127.0.0.1:6379> SMEMBERS k3\n1) "v3"\n')])])]),e("h3",{attrs:{id:"sunion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sunion"}},[a._v("#")]),a._v(" SUNION")]),a._v(" "),e("p",[a._v("SUNION 可以用来计算两个集合的并集，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> SUNION k1 k2\n1) "v4"\n2) "v1"\n3) "v3"\n')])])]),e("h3",{attrs:{id:"sunionstore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sunionstore"}},[a._v("#")]),a._v(" SUNIONSTORE")]),a._v(" "),e("p",[a._v("SUNIONSTORE 和 SUNION 命令类似，不同的是它会将结果保存到一个新的集合中，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('127.0.0.1:6379> SUNIONSTORE k4 k1 k2\n(integer) 3\n127.0.0.1:6379> SMEMBERS k4\n1) "v4"\n2) "v1"\n3) "v3"\n')])])]),e("p",[a._v("OK,列表和集合的命令我们就介绍这么多，更多命令小伙伴们可以参考"),e("a",{attrs:{href:"http://www.redis.cn/commands.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("官方文档"),e("OutboundLink")],1),a._v("。小伙伴在看官方文档时，有什么问题欢迎留言讨论。")])])}),[],!1,null,null,null);t.default=r.exports}}]);