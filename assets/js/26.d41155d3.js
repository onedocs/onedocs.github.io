(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{393:function(t,a,e){"use strict";e.r(a);var r=e(42),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("我们可以针对某一次的提交打上一个标签，有点类似于给某次提交取个别名，比如 1.0 版本发布时打个标签叫 v1.0,2.0 版本发布时打个标签叫 v2.0 ，因为每次版本提交的结果都是一连串的哈希码，不容易记忆，打上 v1.0,v2.0 这些具有某种含义的标签后，可以方便我们进行版本管理。")]),t._v(" "),e("p",[t._v("本文是 Git 系列的第七篇，了解前面的文章有助于更好的理解本文：")]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("1."),e("a",{attrs:{href:"https://mp.weixin.qq.com/s/3RheAJ9LYKK5BnVr331h5A",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 概述"),e("OutboundLink")],1),e("br"),t._v("\n2."),e("a",{attrs:{href:"https://mp.weixin.qq.com/s/S1T4wy3srmLvXgIjvpVEwg",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 基本操作"),e("OutboundLink")],1),e("br"),t._v("\n3."),e("a",{attrs:{href:"https://mp.weixin.qq.com/s/WiLnRQfDVITHMYzGl9pAzQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 中的各种后悔药"),e("OutboundLink")],1),e("br"),t._v("\n4."),e("a",{attrs:{href:"https://mp.weixin.qq.com/s/9OZY7x9DSyRO7T56TyDJ8Q",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 分支管理"),e("OutboundLink")],1),e("br"),t._v("\n5."),e("a",{attrs:{href:"https://mp.weixin.qq.com/s/x5bRe4QBMoVFKv5jNl9iRw",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 关联远程仓库"),e("OutboundLink")],1),e("br"),t._v("\n6."),e("a",{attrs:{href:"https://mp.weixin.qq.com/s/S5rrBQoWwof7n3ZRTrZGWQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 工作区储藏兼谈分支管理中的一个小问题"),e("OutboundLink")],1)]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"轻量级标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#轻量级标签"}},[t._v("#")]),t._v(" 轻量级标签")]),t._v(" "),e("p",[t._v("轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。")]),t._v(" "),e("p",[t._v("首先我们可以通过如下命令来查看当前仓库中的所有标签：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git tag\n")])])]),e("p",[t._v("打标签的方式很简单，直接通过 "),e("code",[t._v("git tag <tagname>")]),t._v(" 来完成即可，如下命令：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git tag v1\n")])])]),e("p",[t._v("表示创建了一个名为 v1 的 tag ，这个 tag 默认是创建在最新一次的 commit 上的，如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://www.javaboy.org/images/git/p209.png",alt:"p209"}})]),t._v(" "),e("p",[t._v("我们可以利用 "),e("code",[t._v("git show <tagname>")]),t._v(" 来查看标签对应的版本信息，如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://www.javaboy.org/images/git/p210.png",alt:"p210"}})]),t._v(" "),e("p",[t._v("我们可以通过 "),e("code",[t._v("$ git tag -d <tagname>")]),t._v(" 命令删除一个标签：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git tag -d v1\n")])])]),e("p",[t._v("如下图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://www.javaboy.org/images/git/p211.png",alt:"p211"}})]),t._v(" "),e("p",[t._v("如果我想给历史上的某次 commit 打一个标签呢?我们可以通过如下命令 "),e("code",[t._v("git tag <tagname> <commitversion>")]),t._v(" ,如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git tag v0.0 7d519\n")])])]),e("p",[t._v("表示给 commit 的哈希码为 7d519 的那一次 commit 打上一个标签，如下图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://www.javaboy.org/images/git/p212.png",alt:"p212"}})]),t._v(" "),e("h2",{attrs:{id:"含附注的标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#含附注的标签"}},[t._v("#")]),t._v(" 含附注的标签")]),t._v(" "),e("p",[t._v("而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。")]),t._v(" "),e("p",[t._v("打一个含附注的标签很简单，使用 "),e("code",[t._v("git tag -a <tagname> -m <msg>")]),t._v(" 命令,如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git tag -a v0.0 -m "文件初次建立" 7d519\n')])])]),e("p",[t._v("如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://www.javaboy.org/images/git/p213.png",alt:"p213"}})]),t._v(" "),e("p",[t._v("如果不加最后的版本号参数，表示给最新的一次 commit 打标签。")]),t._v(" "),e("h2",{attrs:{id:"签署标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#签署标签"}},[t._v("#")]),t._v(" 签署标签")]),t._v(" "),e("p",[t._v("说到签署标签我们得先介绍一下 GPG ：")]),t._v(" "),e("blockquote",[e("p",[t._v("GPG 是加密软件，可以使用 GPG 生成的公钥在网上安全的传播你的文件、代码。为什么说安全的？以 Google 所开发的 repo 为例，repo 即采用 GPG 验证的方式，每个里程碑 tag 都带有 GPG 加密验证，假如在里程碑 v1.12.3 处你想要做修改，修改完后将这个 tag 删除，然后又创建同名 tag 指向你的修改点，这必然是可以的。但是，在你再次 clone 你修改后的项目时，你会发现，你对此里程碑 tag 的改变不被认可，验证失败，导致你的修改在这里无法正常实现。这就是 GPG 验证的作用，这样就能够保证项目作者（私钥持有者）所制定的里程碑别人将无法修改。那么，就可以说，作者的代码是安全传播的。为什么会有这种需求？一个项目从开发到发布，再到后期的更新迭代，一定会存在若干的稳定版本与开发版本（存在不稳定因素）。作为项目发起者、持有者，有权定义他（们）所认可的稳定版本，这个稳定版本，将不允许其他开发者进行改动。还以 Google 的 repo 项目为例，项目所有者定义项目开发过程中的点 A 为稳定版 v1.12.3，那么用户在下载 v1.12.3 版本后，使用的肯定是 A 点所生成的项目、产品，就算其他开发者能够在本地对 v1.12.3 进行重新指定，指定到他们修改后的B点，但是最终修改后的版本给用户用的时候，会出现 GPG 签名验证不通过的问题，也就是说这样的修改是不生效的。")])]),t._v(" "),e("p",[t._v("----摘自<"),e("a",{attrs:{href:"http://blog.csdn.net/killmice/article/details/30748077",target:"_blank",rel:"noopener noreferrer"}},[t._v("带 GPG 签名的 Git tag"),e("OutboundLink")],1),t._v(">一文")]),t._v(" "),e("p",[t._v("使用签署标签我们先要生成 GPG Key，生成命令如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ gpg --gen-key\n")])])]),e("p",[t._v("能默认的就直接按回车默认，不能默认的就根据提示输入相应的值，这里的都很简单，不再赘述。完了之后，就可以通过如下命令来打标签了：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git tag -s v0.0 -u "laowang" -m "文件初次建立" 7d519\n')])])]),e("p",[t._v("就把上面的-a换成-s，然后添加-u参数，-u参数的值是我们在生成 GPG Key 的时候配置的 name 属性的值，注意-u参数不可以写错，否则标签会创建失败，如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://www.javaboy.org/images/git/p214.png",alt:"p214"}})]),t._v(" "),e("p",[t._v("如上图，-u 参数写错时，标签创建失败。")]),t._v(" "),e("h2",{attrs:{id:"标签推送到远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签推送到远程仓库"}},[t._v("#")]),t._v(" 标签推送到远程仓库")]),t._v(" "),e("p",[t._v("git push 命令并不会把tag提交到远程仓库中去，需要我们手动提交，如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git push origin v0.0\n")])])]),e("p",[t._v("表示将 v0.0 标签提交到远程仓库，也可以通过 "),e("code",[t._v("$ git push origin --tags")]),t._v(" 提交所有的 tag 到远程仓库，如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://www.javaboy.org/images/git/p215.png",alt:"p215"}})]),t._v(" "),e("p",[t._v("此时别人调用 git pull 更新代码之后，就能看到我们的 tag。如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://www.javaboy.org/images/git/p216.png",alt:"p216"}})]),t._v(" "),e("p",[t._v("Ok，Git 标签管理我们先说这么多。有问题欢迎留言讨论。")]),t._v(" "),e("p",[t._v("参考资料：")]),t._v(" "),e("ol",[e("li",[t._v("《GitHub入门与实践》")]),t._v(" "),e("li",[t._v("《Pro Git》")])])])}),[],!1,null,null,null);a.default=v.exports}}]);