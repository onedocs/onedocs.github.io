(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{376:function(s,t,a){"use strict";a.r(t);var e=a(42),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("在实际的开发环境或者生产环境，容器往往都不是独立运行的，经常需要多个容器一起运行，此时，如果继续使用 run 命令启动容器，就会非常不便，在这种情况下，docker-compose 是一个不错的选择，使用 docker-compose 可以实现简单的容器编排,本文就来看看 docker-compose 的使用。")]),s._v(" "),a("p",[s._v("本文以 jpress 这样一个开源网站的部署为例，向读者介绍 docker-compose 的使用。jpress 是 Java 版的 wordPress ，不过我们不必关注 jpress 的实现，在这里我们只需要将之当作一个普通的应用即可，完成该项目的部署工作。")]),s._v(" "),a("h2",{attrs:{id:"准备工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[s._v("#")]),s._v(" 准备工作")]),s._v(" "),a("p",[s._v("这里我们一共需要两个容器：")]),s._v(" "),a("ul",[a("li",[s._v("Tomcat")]),s._v(" "),a("li",[s._v("MySQL")])]),s._v(" "),a("p",[s._v("然后需要 jpress 的 war 包，war 包地址："),a("a",{attrs:{href:"https://github.com/JpressProjects/jpress/raw/alpha/wars/jpress-web-newest.war",target:"_blank",rel:"noopener noreferrer"}},[s._v("jpress"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("当然，这里的 jpress 并不是必须的，读者也可以结合自身情况，选择其他的 Java 项目或者自己写一个简单的 Java 项目部署都行。")]),s._v(" "),a("h2",{attrs:{id:"编写-dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写-dockerfile"}},[s._v("#")]),s._v(" 编写 Dockerfile")]),s._v(" "),a("p",[s._v("Tomcat 容器中，要下载相关的 war 等，因此我这里编写一个 Dockerfile 来做这个事。在一个空的文件夹下创建 Dockerfile ，内容如下：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("FROM tomcat\nADD https://github.com/JpressProjects/jpress/raw/alpha/wars/jpress-web-newest.war /usr/local/tomcat/webapps/\nRUN cd /usr/local/tomcat/webapps/ \\\n    && mv jpress-web-newest.war jpress.war\n")])])]),a("p",[s._v("解释：")]),s._v(" "),a("ol",[a("li",[s._v("容器基于 Tomcat 创建。")]),s._v(" "),a("li",[s._v("下载 jpress 项目的 war 包到 tomcat 的 webapps 目录下。")]),s._v(" "),a("li",[s._v("给 jpress 项目重命名。")])]),s._v(" "),a("h2",{attrs:{id:"编写-docker-compose-yml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写-docker-compose-yml"}},[s._v("#")]),s._v(" 编写 docker-compose.yml")]),s._v(" "),a("p",[s._v("在相同的目录下编写 docker-compose.yml ，内容如下（关于 yml 的基础知识，这里不做介绍，读者可以自行查找了解）：")]),s._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3.1"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("web")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" .\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("container_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" jpress\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8080:8080"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" /usr/local/tomcat/\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("depends_on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" db\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("db")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" mysql\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("container_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" mysql\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("authentication"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("plugin=mysql_native_password\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("restart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" always\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3306:3306"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("MYSQL_DATABASE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" jpress\n")])])]),a("p",[s._v("解释：")]),s._v(" "),a("ol",[a("li",[s._v("首先声明了 web 容器，然后声明db容器。")]),s._v(" "),a("li",[a("code",[s._v("build .")]),s._v(" 表示 web 容器项目构建上下文为 "),a("code",[s._v(".")]),s._v(" ，即，将在当前目录下查找 Dockerfile 构建 web 容器。")]),s._v(" "),a("li",[s._v("container_name 表示容器的名字。")]),s._v(" "),a("li",[s._v("ports 是指容器的端口映射。")]),s._v(" "),a("li",[s._v("volumes 表示配置容器的数据卷。")]),s._v(" "),a("li",[s._v("depends_on 表示该容器依赖于 db 容器，在启动时，db 容器将先启动，web 容器后启动，这只是启动时机的先后问题，并不是说 web 容器会等 db 容器完全启动了才会启动。")]),s._v(" "),a("li",[s._v("对于 db 容器，则使用 image 来构建，没有使用 Dockerfile 。")]),s._v(" "),a("li",[s._v("restart 描述了容器的重启策略。")]),s._v(" "),a("li",[s._v("environment 则是启动容器时的环境变量，这里配置了数据库 root 用户的密码以及在启动时创建一个名为 jpress 的库，environment 的配置可以使用字典和数组两种形式。")])]),s._v(" "),a("p",[s._v("OK，经过如上步骤，docker-compose.yml 就算配置成功了")]),s._v(" "),a("h2",{attrs:{id:"运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行"}},[s._v("#")]),s._v(" 运行")]),s._v(" "),a("p",[s._v("运行的方式有好几种，但是建议使用 up 这个终极命令，up 命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。对于大部分应用都可以直接通过该命令来启动。默认情况下， "),a("code",[s._v("docker-compose up")]),s._v(" 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试，通过 Ctrl-C 停止命令时，所有容器将会停止，而如果使用 "),a("code",[s._v("docker-compose up -d")]),s._v(" 命令，则将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。")]),s._v(" "),a("p",[s._v("因此，这里进入到 docker-compose.yml 所在目录下，执行如下命令：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker-compose up -d\n")])])]),a("p",[s._v("执行结果如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://www.javaboy.org/images/docker/21-1.png",alt:"21-1"}})]),s._v(" "),a("p",[s._v("执行后，通过 "),a("code",[s._v("docker-compose ps")]),s._v(" 命令可以看到容器已经启动了。")]),s._v(" "),a("h2",{attrs:{id:"初始化配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化配置"}},[s._v("#")]),s._v(" 初始化配置")]),s._v(" "),a("p",[s._v("接下来，浏览器中输入 http://localhost:8080/jpress ，就可以看到 jpress 的配置页面，如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://www.javaboy.org/images/docker/21-2.png",alt:"21-2"}})]),s._v(" "),a("p",[s._v("根据引导页面配置数据库的连接信息以及网站的基本信息：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://www.javaboy.org/images/docker/21-3.png",alt:"21-3"}}),a("br"),s._v(" "),a("img",{attrs:{src:"http://www.javaboy.org/images/docker/21-4.png",alt:"21-4"}})]),s._v(" "),a("p",[a("strong",[s._v("注意：由于 mysql 和 web 都运行在容器中，因此在配置数据库地址时，不能写回环地址，否则就去 web 所在的容器里找数据库了")]),s._v("。")]),s._v(" "),a("p",[s._v("配置完成后，运行如下命令，重启 web 容器：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker restart jpress\n")])])]),a("h2",{attrs:{id:"测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[s._v("#")]),s._v(" 测试")]),s._v(" "),a("p",[s._v("浏览器中分别查看博客首页以及后台管理页，如下图：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://www.javaboy.org/images/docker/21-5.png",alt:"21-5"}}),a("br"),s._v(" "),a("img",{attrs:{src:"http://www.javaboy.org/images/docker/21-6.png",alt:"21-6"}})]),s._v(" "),a("h2",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),a("p",[s._v("如果想要停止容器的运行，可以执行如下命令：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker-compose down\n")])])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("本文主要向大家介绍了简单的容器编排，专业的或者大型项目的容器编排需要结合 K8s 来做，我们后面有机会再向大家介绍。")]),s._v(" "),a("p",[s._v("参考资料：")]),s._v(" "),a("p",[s._v("[1] 曾金龙，肖新华，刘清.Docker开发实践[M].北京：人民邮电出版社，2015.")])])}),[],!1,null,null,null);t.default=r.exports}}]);