(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{584:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("前面和大家聊了 Spring Security 如何像 QQ 一样，自动踢掉已登录用户（"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/nfqFDaLDH8UJVx7mqqgHmQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot + Vue 前后端分离项目，如何踢掉已登录用户？"),a("OutboundLink")],1),t._v("），但是前面我们是基于单体应用的，如果我们的项目是集群化部署，这个问题该如何解决呢？")]),t._v(" "),a("p",[t._v("今天我们就来看看集群化部署，Spring Security 要如何处理 session 并发。")]),t._v(" "),a("p",[t._v("本文是 Spring Security 系列第 17 篇，阅读前面的文章有助于更好的理解本文：")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/3O2yNnG56uAsMnJyrVptDg",target:"_blank",rel:"noopener noreferrer"}},[t._v("挖一个大坑，Spring Security 开搞！"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/Q0GkUb1Nt6ynV22LFHuQrQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("松哥手把手带你入门 Spring Security，别再问密码怎么解密了"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/kHJRKwH-WUx-JEeaQMa7jw",target:"_blank",rel:"noopener noreferrer"}},[t._v("手把手教你定制 Spring Security 中的表单登录"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/Xzt9ymff0DCbAQbklHOxpQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Security 做前后端分离，咱就别做页面跳转了！统统 JSON 交互"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/BKAYXMaBBs0VrKZtzorn-w",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Security 中的授权操作原来这么简单"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/EurEXmU0M9AKuUs4Jh_V5g",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Security 如何将用户数据存入数据库？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/VWJvINbi1DB3fF-Mcx7mGg",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Security+Spring Data Jpa 强强联手，安全管理只有更简单！"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/aSsGNBSWMTsAEXjn9wQnYQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot + Spring Security 实现自动登录功能"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/T6_PBRzIADE71af3yoKB6g",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot 自动登录，安全风险要怎么控制？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/JucUstZoiTkRG2a2m1Vklg",target:"_blank",rel:"noopener noreferrer"}},[t._v("在微服务项目中，Spring Security 比 Shiro 强在哪？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/LeiwIJVevaU5C1Fn5nNEeg",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringSecurity 自定义认证逻辑的两种方式(高级玩法)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/pSX9XnPNQPyLWGc6oWR3hA",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Security 中如何快速查看登录用户 IP 地址等信息？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/9f2e4Ua2_fxEd-S9Y7DDtA",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Security 自动踢掉前一个登录用户，一个配置搞定！"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/nfqFDaLDH8UJVx7mqqgHmQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot + Vue 前后端分离项目，如何踢掉已登录用户？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/Fuu9rKoOvSyuvCKSyh6dUQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Security 自带防火墙！你都不知道自己的系统有多安全！"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/9SaNvVfiivWUIAe6OZgpZQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是会话固定攻击？Spring Boot 中要如何防御会话固定攻击？"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"_1-集群会话方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-集群会话方案"}},[t._v("#")]),t._v(" 1.集群会话方案")]),t._v(" "),a("p",[t._v("在传统的单服务架构中，一般来说，只有一个服务器，那么不存在 Session 共享问题，但是在分布式/集群项目中，Session 共享则是一个必须面对的问题，先看一个简单的架构图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.itboyhub.com/2020/05/14-1.png",alt:""}})]),t._v(" "),a("p",[t._v("在这样的架构中，会出现一些单服务中不存在的问题，例如客户端发起一个请求，这个请求到达 Nginx 上之后，被 Nginx 转发到 Tomcat A 上，然后在 Tomcat A 上往 session 中保存了一份数据，下次又来一个请求，这个请求被转发到 Tomcat B  上，此时再去 Session 中获取数据，发现没有之前的数据。")]),t._v(" "),a("h3",{attrs:{id:"_1-1-session-共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-session-共享"}},[t._v("#")]),t._v(" 1.1 session 共享")]),t._v(" "),a("p",[t._v("对于这一类问题的解决，目前比较主流的方案就是将各个服务之间需要共享的数据，保存到一个公共的地方（主流方案就是 Redis）：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.itboyhub.com/2020/05/14-2.png",alt:""}})]),t._v(" "),a("p",[t._v("当所有 Tomcat 需要往 Session 中写数据时，都往 Redis 中写，当所有 Tomcat 需要读数据时，都从 Redis 中读。这样，不同的服务就可以使用相同的 Session 数据了。")]),t._v(" "),a("p",[t._v("这样的方案，可以由开发者手动实现，即手动往 Redis 中存储数据，手动从 Redis 中读取数据，相当于使用一些 Redis 客户端工具来实现这样的功能，毫无疑问，手动实现工作量还是蛮大的。")]),t._v(" "),a("p",[t._v("一个简化的方案就是使用 Spring Session 来实现这一功能，Spring Session 就是使用 Spring 中的代理过滤器，将所有的 Session 操作拦截下来，自动的将数据 同步到 Redis 中，或者自动的从 Redis 中读取数据。")]),t._v(" "),a("p",[t._v("对于开发者来说，所有关于 Session 同步的操作都是透明的，开发者使用 Spring Session，一旦配置完成后，具体的用法就像使用一个普通的 Session 一样。")]),t._v(" "),a("h3",{attrs:{id:"_1-2-session-拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-session-拷贝"}},[t._v("#")]),t._v(" 1.2 session 拷贝")]),t._v(" "),a("p",[t._v("session 拷贝就是不利用 redis，直接在各个 Tomcat 之间进行 session 数据拷贝，但是这种方式效率有点低，Tomcat A、B、C 中任意一个的 session 发生了变化，都需要拷贝到其他 Tomcat 上，如果集群中的服务器数量特别多的话，这种方式不仅效率低，还会有很严重的延迟。")]),t._v(" "),a("p",[t._v("所以这种方案一般作为了解即可。")]),t._v(" "),a("h3",{attrs:{id:"_1-3-粘滞会话"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-粘滞会话"}},[t._v("#")]),t._v(" 1.3 粘滞会话")]),t._v(" "),a("p",[t._v("所谓的粘滞会话就是将相同 IP 发送来的请求，通过 Nginx 路由到同一个 Tomcat 上去，这样就不用进行 session 共享与同步了。这是一个办法，但是在一些极端情况下，可能会导致负载失衡（因为大部分情况下，都是很多人用同一个公网 IP）。")]),t._v(" "),a("p",[a("strong",[t._v("所以，Session 共享就成为了这个问题目前主流的解决方案了。")])]),t._v(" "),a("h2",{attrs:{id:"_2-session共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-session共享"}},[t._v("#")]),t._v(" 2.Session共享")]),t._v(" "),a("h3",{attrs:{id:"_2-1-创建工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-创建工程"}},[t._v("#")]),t._v(" 2.1 创建工程")]),t._v(" "),a("p",[t._v("首先 创建一个 Spring Boot 工程，引入 Web、Spring Session、Spring Security 以及 Redis:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.itboyhub.com/2020/05/20200514092541.png",alt:""}})]),t._v(" "),a("p",[t._v("创建成功之后，pom.xml 文件如下：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-data-redis"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-security"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-web"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.session"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-session-data-redis"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h3",{attrs:{id:"_2-2-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-配置"}},[t._v("#")]),t._v(" 2.2 配置")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.password")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("123")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("6379")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.redis.host")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("127.0.0.1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.security.user.name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("javaboy")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("spring.security.user.password")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("123")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("server.port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("8080")]),t._v("\n")])])]),a("p",[t._v("配置一下 Redis 的基本信息；Spring Security 为了简化，我就将用户名密码直接配置在 application.properties 中了，最后再配置一下项目端口号。")]),t._v(" "),a("h3",{attrs:{id:"_2-3-使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-使用"}},[t._v("#")]),t._v(" 2.3 使用")]),t._v(" "),a("p",[t._v("配置完成后 ，就可以使用 Spring Session 了，其实就是使用普通的 HttpSession ，其他的 Session 同步到 Redis 等操作，框架已经自动帮你完成了：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RestController")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HelloController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${server.port}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GetMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/set"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpSession")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAttribute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"javaboy"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GetMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/get"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpSession")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAttribute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('":"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("考虑到一会 Spring Boot 将以集群的方式启动 ，为了获取每一个请求到底是哪一个 Spring  Boot 提供的服务，需要在每次请求时返回当前服务的端口号，因此这里我注入了 server.port 。")]),t._v(" "),a("p",[t._v("接下来 ，项目打包：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.itboyhub.com/2020/05/14-4.png",alt:""}})]),t._v(" "),a("p",[t._v("打包之后，启动项目的两个实例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("java -jar session-4-0.0.1-SNAPSHOT.jar --server.port=8080\njava -jar session-4-0.0.1-SNAPSHOT.jar --server.port=8081\n")])])]),a("p",[t._v("然后先访问 "),a("code",[t._v("localhost:8080/set")]),t._v(" 向 "),a("code",[t._v("8080")]),t._v(" 这个服务的 "),a("code",[t._v("Session")]),t._v(" 中保存一个变量，第一次访问时会自动跳转到登录页面，输入用户名密码进行登录即可。访问成功后，数据就已经自动同步到 "),a("code",[t._v("Redis")]),t._v("  中 了 ：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.itboyhub.com/2020/05/20200514104238.png",alt:""}})]),t._v(" "),a("p",[t._v("然后，再调用 "),a("code",[t._v("localhost:8081/get")]),t._v(" 接口，就可以获取到 "),a("code",[t._v("8080")]),t._v(" 服务的 "),a("code",[t._v("session")]),t._v(" 中的数据：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.itboyhub.com/2020/05/14-6.png",alt:""}})]),t._v(" "),a("p",[t._v("此时关于 session 共享的配置就已经全部完成了，session 共享的效果我们已经看到了。")]),t._v(" "),a("h3",{attrs:{id:"_2-4-security-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-security-配置"}},[t._v("#")]),t._v(" 2.4 Security 配置")]),t._v(" "),a("p",[t._v("Session 共享已经实现了，但是我们发现新的问题，在"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/nfqFDaLDH8UJVx7mqqgHmQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot + Vue 前后端分离项目，如何踢掉已登录用户？"),a("OutboundLink")],1),t._v("一文中我们配置的 session 并发管理失效了。")]),t._v(" "),a("p",[t._v("也就是说，如果我添加了如下配置：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("configure")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpSecurity")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("authorizeRequests")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("anyRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sessionManagement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("maximumSessions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("maxSessionsPreventsLogin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("现在这个配置不起作用，用户依然可以在多个浏览器上同时登录。")]),t._v(" "),a("p",[t._v("这是怎么回事呢？")]),t._v(" "),a("p",[t._v("首先建议大家回忆一下"),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/nfqFDaLDH8UJVx7mqqgHmQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot + Vue 前后端分离项目，如何踢掉已登录用户？"),a("OutboundLink")],1),t._v("一文。")]),t._v(" "),a("p",[t._v("在该文中，我们提到，会话注册表的维护默认是由 SessionRegistryImpl 来维护的，而 SessionRegistryImpl 的维护就是基于内存的维护。现在我们虽然启用了 Spring Session+Redis 做 Session 共享，但是 SessionRegistryImpl 依然是基于内存来维护的，所以我们要修改 SessionRegistryImpl 的实现逻辑。")]),t._v(" "),a("p",[t._v("修改方式也很简单，实际上 Spring Session 为我们提供了对应的实现类 SpringSessionBackedSessionRegistry，具体配置如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SecurityConfig")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSecurityConfigurerAdapter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FindByIndexNameSessionRepository")]),t._v(" sessionRepository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("configure")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpSecurity")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("authorizeRequests")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("anyRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sessionManagement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("maximumSessions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("maxSessionsPreventsLogin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sessionRegistry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sessionRegistry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringSessionBackedSessionRegistry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sessionRegistry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringSessionBackedSessionRegistry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sessionRepository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("我们在这里只需要提供一个 SpringSessionBackedSessionRegistry 的实例，并且将其配置到 sessionManagement 中去即可。以后，session 并发数据的维护将由 SpringSessionBackedSessionRegistry 来完成，而不是 SessionRegistryImpl，"),a("strong",[t._v("如此，我们关于 session 并发的配置就生效了，在集群环境下，用户也只可以在一台设备上登录。")])]),t._v(" "),a("p",[t._v("为了让我们的案例看起更完美一些，接下来我们来引入 Nginx ，实现服务实例自动切换。")]),t._v(" "),a("h2",{attrs:{id:"_3-引入-nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-引入-nginx"}},[t._v("#")]),t._v(" 3.引入 Nginx")]),t._v(" "),a("p",[t._v("很简单，进入  Nginx 的安装目录的 conf 目录下（默认是在 "),a("code",[t._v("/usr/local/nginx/conf")]),t._v("），编辑 nginx.conf 文件:")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.itboyhub.com/2020/05/14-7.png",alt:""}})]),t._v(" "),a("p",[t._v("在这段配置中：")]),t._v(" "),a("ol",[a("li",[t._v("upstream 表示配置上游服务器")]),t._v(" "),a("li",[t._v("javaboy.org 表示服务器集群的名字，这个可以随意取名字")]),t._v(" "),a("li",[t._v("upstream 里边配置的是一个个的单独服务")]),t._v(" "),a("li",[t._v("weight 表示服务的权重，意味者将有多少比例的请求从 Nginx 上转发到该服务上")]),t._v(" "),a("li",[t._v("location 中的 proxy_pass 表示请求转发的地址，"),a("code",[t._v("/")]),t._v(" 表示拦截到所有的请求，转发转发到刚刚配置好的服务集群中")]),t._v(" "),a("li",[t._v("proxy_redirect 表示设置当发生重定向请求时，nginx 自动修正响应头数据（默认是 Tomcat 返回重定向，此时重定向的地址是 Tomcat 的地址，我们需要将之修改使之成为 Nginx 的地址）。")])]),t._v(" "),a("p",[t._v("配置完成后，将本地的 Spring Boot 打包好的 jar 上传到 Linux ，然后在 Linux 上分别启动两个 Spring Boot 实例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("nohup java -jar session-4-0.0.1-SNAPSHOT.jar --server.port=8080 &\nnohup java -jar session-4-0.0.1-SNAPSHOT.jar --server.port=8081 &\n")])])]),a("p",[t._v("其中")]),t._v(" "),a("ul",[a("li",[t._v("nohup 表示当终端关闭时，Spring Boot 不要停止运行")]),t._v(" "),a("li",[t._v("& 表示让 Spring Boot 在后台启动")])]),t._v(" "),a("p",[t._v("配置完成后，重启 Nginx：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/usr/local/nginx/sbin/nginx -s reload\n")])])]),a("p",[t._v("Nginx 启动成功后，我们首先手动清除 Redis 上的数据，然后访问 "),a("code",[t._v("192.168.66.128/set")]),t._v(" 表示向 "),a("code",[t._v("session")]),t._v(" 中保存数据，这个请求首先会到达 "),a("code",[t._v("Nginx")]),t._v(" 上，再由 "),a("code",[t._v("Nginx")]),t._v(" 转发给某一个 "),a("code",[t._v("Spring Boot")]),t._v(" 实例：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.itboyhub.com/2020/05/14-8.png",alt:""}})]),t._v(" "),a("p",[t._v("如上，表示端口为 "),a("code",[t._v("8081")]),t._v(" 的 "),a("code",[t._v("Spring Boot")]),t._v(" 处理了这个 "),a("code",[t._v("/set")]),t._v(" 请求，再访问 "),a("code",[t._v("/get")]),t._v(" 请求：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://img.itboyhub.com/2020/05/14-9.png",alt:""}})]),t._v(" "),a("p",[t._v("可以看到，"),a("code",[t._v("/get")]),t._v(" 请求是被端口为 8080 的服务所处理的。")]),t._v(" "),a("h2",{attrs:{id:"_4-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结"}},[t._v("#")]),t._v(" 4.总结")]),t._v(" "),a("p",[t._v("本文主要向大家介绍了 Spring Session 的使用，另外也涉及到一些 Nginx 的使用 ，虽然本文较长，但是实际上 Spring Session 的配置没啥，涉及到的配置也都很简单。")]),t._v(" "),a("p",[t._v("如果大家没有在 SSM 架构中用过 Spring Session ，可能不太好理解我们在 Spring Boot 中使用 Spring Session 有多么方便，因为在 SSM 架构中，Spring Session 的使用要配置三个地方 ，一个是 web.xml 配置代理过滤器，然后在 Spring 容器中配置 Redis，最后再配置 Spring Session，步骤还是有些繁琐的，而 Spring Boot 中直接帮我们省去了这些繁琐的步骤！")]),t._v(" "),a("p",[t._v("好了 ，本文就说到这里，本文相关案例我已经上传到 GitHub ，大家可以自行下载:"),a("a",{attrs:{href:"https://github.com/lenve/spring-security-samples",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/lenve/spring-security-samples"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("如果觉得有收获，记得点个在看鼓励下松哥哦～")])])}),[],!1,null,null,null);s.default=e.exports}}]);