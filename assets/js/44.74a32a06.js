(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{410:function(t,a,s){"use strict";s.r(a);var e=s(42),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("副本集环境的搭建以及一些基本的操作我们都了解了，本文我们来看看这个数据复制到底是怎么实现的。")]),t._v(" "),s("h2",{attrs:{id:"数据同步方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据同步方式"}},[t._v("#")]),t._v(" 数据同步方式")]),t._v(" "),s("p",[t._v("MongoDB 中的复制功能主要是使用操作日志 oplog.rs 来实现的，oplog.rs 包含了主节点的每一次写操作，oplog.rs 是主节点中 local 数据库的一个固定集合，我们可以通过如下命令查看到：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("use local\nshow tables\n")])])]),s("p",[t._v("如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://www.javaboy.org/images/mongodb/17-1.png",alt:"p254"}})]),t._v(" "),s("p",[t._v("备份节点通过查询这个集合就知道要复制哪些数据，同时，每一个备份节点也都维护着自己的 oplog.rs，自己的 oplog.rs 则用来记录每一次从主节点复制数据的操作，如此，每一个备份节点都可以再作为数据源提供给其他成员使用，如果某一个备份节点在使用的过程中挂掉了，那么当它重启之后，会自动从 oplog.rs 的最后一个操作开始同步。")]),t._v(" "),s("p",[t._v("上文我们也已经说过 oplog.rs 是一个固定集合，我们可以通过 "),s("code",[t._v("db.getCollection('oplog.rs').stats()")]),t._v(" 这个命令来查看这个固定集合的属性，包括集合大小等，执行部分结果如下：")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"ns"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"local.oplog.rs"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"size"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18170305")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"count"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("177443")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"avgObjSize"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("102")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"storageSize"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5902336")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"capped"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"max"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("-1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"maxSize"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1038090240")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sleepCount"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sleepMS"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("既然是固定集合，它里边能够保存的数据大小就是有限的。通常，oplog.rs 使用空间的增长速度与系统处理处理写请求的速率近乎相同，比如主节点每分钟处理了 1KB 的写入请求，那么 oplog.rs 也可能会在一分钟内写入 1KB 条操作日志，但是如果主节点执行了批量删除的命令，比如下面这种：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("db.c1.deleteMany({x:{$type:1}})\n")])])]),s("p",[t._v("此时每一个受影响的文档都会产生一条 oplog 中的日志，这个时候 oplog.rs 中的日志会快速增加。")]),t._v(" "),s("h2",{attrs:{id:"成员状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员状态"}},[t._v("#")]),t._v(" 成员状态")]),t._v(" "),s("p",[t._v("到目前为止我们了解到的成员状态有两种，一个是 PRIMARY ，还有一个是 SECONDDARY ，成员状态的获取需要靠心跳来维护，副本集中的每一个成员每隔两秒就会向其他成员发送一个心跳请求，用来检查成员的状态，成员的状态主要有如下几种：")]),t._v(" "),s("h4",{attrs:{id:"startup"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#startup"}},[t._v("#")]),t._v(" STARTUP")]),t._v(" "),s("p",[t._v("副本集中的成员刚刚启动时处于这个状态下，此时，MongoDB 会去加载成员的副本集配置，配置加载成功之后，就进入到 STARTUP2 的状态。")]),t._v(" "),s("h4",{attrs:{id:"startup2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#startup2"}},[t._v("#")]),t._v(" STARTUP2")]),t._v(" "),s("p",[t._v("整个初始化同步过程都处于这个状态。")]),t._v(" "),s("h4",{attrs:{id:"recovering"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#recovering"}},[t._v("#")]),t._v(" RECOVERING")]),t._v(" "),s("p",[t._v("这个状态是由 STARTUP2 状态来的，此时成员运转正常，但是此时还不能处理读取请求。")]),t._v(" "),s("h4",{attrs:{id:"arbiter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arbiter"}},[t._v("#")]),t._v(" ARBITER")]),t._v(" "),s("p",[t._v("这是仲裁者所处的状态。")]),t._v(" "),s("h4",{attrs:{id:"down"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#down"}},[t._v("#")]),t._v(" DOWN")]),t._v(" "),s("p",[t._v("当一个原本运行正常的成员无法访问到时，该成员就处于 DOWN 的状态。")]),t._v(" "),s("h4",{attrs:{id:"unknown"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unknown"}},[t._v("#")]),t._v(" UNKNOWN")]),t._v(" "),s("p",[t._v("如果一个成员无法到达其他任何成员，该成员就处于 UNKNOWN 状态，比如我们利用 rs.add() 方法添加一个不存在的成员，这个成员的状态就是 UNKNOWN。")]),t._v(" "),s("h4",{attrs:{id:"removed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#removed"}},[t._v("#")]),t._v(" REMOVED")]),t._v(" "),s("p",[t._v("成员被从副本集中移除时就变成这个状态。")]),t._v(" "),s("h4",{attrs:{id:"rollback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rollback"}},[t._v("#")]),t._v(" ROLLBACK")]),t._v(" "),s("p",[t._v("如果成员正在进行数据回滚，它就处于 ROLLBACK 状态，回滚结束后会转换为 RECOVERING 状态。")]),t._v(" "),s("h4",{attrs:{id:"fatal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fatal"}},[t._v("#")]),t._v(" FATAL")]),t._v(" "),s("p",[t._v("当一个成员发生了不可挽回的错误时，且不再尝试恢复正常的话，就处于这个状态。")]),t._v(" "),s("h2",{attrs:{id:"主节点转备份节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主节点转备份节点"}},[t._v("#")]),t._v(" 主节点转备份节点")]),t._v(" "),s("p",[t._v("通过如下命令可以让主节点转为备份节点：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("rs.stepDown()\n")])])]),s("p",[t._v("主节点转为备份节点之后会有新的主节点被选举出来，可以通过 rs.status() 来查看新的主节点。")]),t._v(" "),s("h2",{attrs:{id:"rs-status-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rs-status-方法"}},[t._v("#")]),t._v(" rs.status()方法")]),t._v(" "),s("p",[t._v("前面我们已经多次使用过 rs.status() 方法， rs.status() 方法会列出每个备份节点的含义，我们来看看这些参数的含义，先来列出一个 rs.status() 方法的返回值样例：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n"members" : [\n    {\n        "_id" : 1,\n        "name" : "192.168.248.135:27017",\n        "health" : 1,\n        "state" : 2,\n        "stateStr" : "SECONDARY",\n        "uptime" : 241,\n        "optime" : {\n                "ts" : Timestamp(1509881297, 1),\n                "t" : NumberLong(16)\n        },\n        "optimeDurable" : {\n                "ts" : Timestamp(1509881297, 1),\n                "t" : NumberLong(16)\n        },\n        "optimeDate" : ISODate("2017-11-05T11:28:17Z"),\n        "optimeDurableDate" : ISODate("2017-11-05T11:28:17Z"),\n        "lastHeartbeat" : ISODate("2017-11-05T11:28:18.073Z"),\n        "lastHeartbeatRecv" : ISODate("2017-11-05T11:28:18.769Z"),\n        "pingMs" : NumberLong(0),\n        "syncingTo" : "192.168.248.136:27017",\n        "configVersion" : 15\n    },\n    {\n        "_id" : 3,\n        "name" : "192.168.248.136:27017",\n        "health" : 1,\n        "state" : 1,\n        "stateStr" : "PRIMARY",\n        "uptime" : 250,\n        "optime" : {\n                "ts" : Timestamp(1509881297, 1),\n                "t" : NumberLong(16)\n        },\n        "optimeDate" : ISODate("2017-11-05T11:28:17Z"),\n        "electionTime" : Timestamp(1509881276, 1),\n        "electionDate" : ISODate("2017-11-05T11:27:56Z"),\n        "configVersion" : 15,\n        "self" : true\n    }\n]\n}\n')])])]),s("ol",[s("li",[t._v("stateStr用来描述当前节点的状态。")]),t._v(" "),s("li",[t._v("uptime表示从成员可达到现在所经历的时间。")]),t._v(" "),s("li",[t._v("optimeDate表示每个成员的oplog中最后一个操作发生的时间。")]),t._v(" "),s("li",[t._v("lastHeartbeat表示当前服务器最后一次收到其他成员心跳的时间。")]),t._v(" "),s("li",[t._v("pingMs表示心跳从当前服务器到达某个成员所花费的平均时间。")]),t._v(" "),s("li",[t._v("syncingTo表示同步的数据源。")]),t._v(" "),s("li",[t._v("health表示该服务器是否可达，1表示可达，0表示不可达。")])]),t._v(" "),s("h2",{attrs:{id:"复制链问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复制链问题"}},[t._v("#")]),t._v(" 复制链问题")]),t._v(" "),s("p",[t._v("数据复制时可以从主节点直接复制，也可以从备份节点开始复制，从备份节点复制可以形成复制链，如果想禁止复制链，即所有的数据都从主节点复制，可以通过 chainingAllowed 属性来设置，具体步骤如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("config=rs.config()\nconfig.settings.chainingAllowed=false\nrs.reconfig(config)\n")])])]),s("p",[t._v("好了，MongoDB 中副本集的其他细节我们就先说到这里，小伙伴们有问题欢迎留言讨论。\n参考资料：")]),t._v(" "),s("ol",[s("li",[t._v("《MongoDB权威指南第2版》")])])])}),[],!1,null,null,null);a.default=r.exports}}]);