(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{426:function(e,t,a){"use strict";a.r(t);var s=a(42),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("上篇文章我们介绍了如何在 Linux 中安装 Redis，本文我们来了解下 Redis 中的五种数据类型。")]),e._v(" "),a("p",[e._v("本文是 Redis 系列的第二篇文章，了解前面的文章有助于更好的理解本文：")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("1."),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/NCm3zNGIDVMnlykeOiaH7Q",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux 上安装 Redis"),a("OutboundLink")],1)]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"五大数据类型介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五大数据类型介绍"}},[e._v("#")]),e._v(" 五大数据类型介绍")]),e._v(" "),a("p",[e._v("redis 中的数据都是以 key/value 的形式存储的，五大数据类型主要是指 value 的数据类型，包含如下五种：")]),e._v(" "),a("h3",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[e._v("#")]),e._v(" STRING")]),e._v(" "),a("p",[e._v("STRING 是 redis 中最基本的数据类型，redis 中的 STRING 类型是二进制安全的，即它可以包含任何数据，比如一个序列化的对象甚至一个 jpg 图片，要注意的是 redis 中的字符串大小上限是 512M 。")]),e._v(" "),a("h3",{attrs:{id:"list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[e._v("#")]),e._v(" LIST")]),e._v(" "),a("p",[e._v("LIST 是一个简单的字符串列表，按照插入顺序进行排序，我们可以从 LIST 的头部 (LEFT) 或者尾部 (RIGHT) 插入一个元素，也可以从 LIST 的头部(LEFT)或者尾部 (RIGHT) 弹出一个元素。")]),e._v(" "),a("h3",{attrs:{id:"hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[e._v("#")]),e._v(" HASH")]),e._v(" "),a("p",[e._v("HASH 类似于 Java 中的 Map ，是一个键值对集合，在 redis 中可以用来存储对象。")]),e._v(" "),a("h3",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" SET")]),e._v(" "),a("p",[e._v("SET 是 STRING 类型的无序集合，不同于 LIST ，SET 中的元素不可以重复。")]),e._v(" "),a("h3",{attrs:{id:"zset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zset"}},[e._v("#")]),e._v(" ZSET")]),e._v(" "),a("p",[e._v("ZSET 和 SET 一样，也是 STRING 类型的元素的集合，不同的是 ZSET 中的每个元素都会关联一个 double 类型的分数，ZSET 中的成员都是唯一的，但是所关联的分数可以重复。")]),e._v(" "),a("p",[e._v("OK，通过上面的介绍，相信小伙伴们对五大数据类型都有一个大致的认识了，接下来我们就来看看这五种数据类型要怎么操作。")]),e._v(" "),a("h2",{attrs:{id:"key-相关的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-相关的命令"}},[e._v("#")]),e._v(" key 相关的命令")]),e._v(" "),a("p",[e._v("由于五大数据类型的数据结构本身有差异，因此对应的命令也会不同，但是有一些命令不管对于哪种数据类型都是存在的，我们今天就先来看看这样一些特殊的命令。")]),e._v(" "),a("p",[e._v("首先通过 "),a("code",[e._v("redis-server redis.conf")]),e._v(" 命令启动 redi s，再通过 "),a("code",[e._v("redis-cli")]),e._v(" 命令进入到控制台中，如下：")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://www.javaboy.org/images/redis/p295.png",alt:""}})]),e._v(" "),a("p",[e._v("首先我们可以通过 set 命令插入一条记录：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> set k1 v1\nOK\n")])])]),a("h3",{attrs:{id:"del-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#del-命令"}},[e._v("#")]),e._v(" DEL 命令")]),e._v(" "),a("p",[e._v("看到 OK 表示插入成功。通过 DEL 命令我们可以删除一个已经存在的 key，如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> DEL k1\n(integer) 1\n")])])]),a("p",[e._v("看到 (integer) 1 表示数据已经删除成功。")]),e._v(" "),a("h3",{attrs:{id:"dump-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dump-命令"}},[e._v("#")]),e._v(" DUMP 命令")]),e._v(" "),a("p",[e._v("DUMP 命令可以序列化给定的 key，并返回序列化之后的值：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('127.0.0.1:6379> DUMP k1\n"\\x00\\x02v1\\b\\x00\\xe6\\xc8\\\\\\xe1bI\\xf3c"\n')])])]),a("h3",{attrs:{id:"exists-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exists-命令"}},[e._v("#")]),e._v(" EXISTS 命令")]),e._v(" "),a("p",[e._v("EXISTS 命令用来检测一个给定的 key 是否存在，如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> EXISTS k1\n(integer) 1\n127.0.0.1:6379> EXISTS k2\n(integer) 0\n127.0.0.1:6379>\n")])])]),a("p",[e._v("上面的运行结果表示 k1 存在而 k2 不存在。")]),e._v(" "),a("h3",{attrs:{id:"ttl-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ttl-命令"}},[e._v("#")]),e._v(" TTL 命令")]),e._v(" "),a("p",[e._v("TTL 命令可以查看一个给定 key 的有效时间：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> TTL k1\n(integer) -1\n127.0.0.1:6379> TTL k2\n(integer) -2\n")])])]),a("p",[e._v("-2 表示 key 不存在或者已过期；-1 表示 key 存在并且没有设置过期时间（永久有效）。当然，我们可以通过下面的命令给 key 设置一个过期时间：")]),e._v(" "),a("h3",{attrs:{id:"expire-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expire-命令"}},[e._v("#")]),e._v(" EXPIRE 命令")]),e._v(" "),a("p",[e._v("EXPIRE 命令可以给 key 设置有效期，在有效期过后，key 会被销毁。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> EXPIRE k1 30\n(integer) 1\n127.0.0.1:6379> TTL k1\n(integer) 25\n127.0.0.1:6379>\n")])])]),a("p",[e._v("30 表示 30 秒，TTL k1 返回 25 表示这个 key 的有效期还剩 25 秒。")]),e._v(" "),a("h3",{attrs:{id:"persist-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#persist-命令"}},[e._v("#")]),e._v(" PERSIST 命令")]),e._v(" "),a("p",[e._v("PERSIST 命令表示移除一个 key 的过期时间，这样该 key 就永远不会过期：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> EXPIRE k1 60\n(integer) 1\n127.0.0.1:6379> ttl k1\n(integer) 57\n127.0.0.1:6379> PERSIST k1\n(integer) 1\n127.0.0.1:6379> ttl k1\n(integer) -1\n")])])]),a("h3",{attrs:{id:"pexpire-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pexpire-命令"}},[e._v("#")]),e._v(" PEXPIRE 命令")]),e._v(" "),a("p",[e._v("PEXPIRE 命令的功能和 EXPIRE 命令的功能基本一致，只不过这里设置的参数是毫秒：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> PEXPIRE k1 60000\n(integer) 1\n")])])]),a("h3",{attrs:{id:"pttl-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pttl-命令"}},[e._v("#")]),e._v(" PTTL 命令")]),e._v(" "),a("p",[e._v("PTTL 命令和 TTL 命令基本一致，只不过 PTTL 返回的是毫秒数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("127.0.0.1:6379> PTTL k1\n(integer) 25421\n")])])]),a("h3",{attrs:{id:"keys-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keys-命令"}},[e._v("#")]),e._v(" KEYS 命令")]),e._v(" "),a("p",[e._v("KEYS 命令可以获取满足给定模式的所有 key，比如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('127.0.0.1:6379> KEYS *\n1) "k3"\n2) "k2"\n3) "k1"\n')])])]),a("p",[e._v("KEYS  "),a("code",[e._v("*")]),e._v(" 表示获取所有的 KEY， "),a("code",[e._v("*")]),e._v(" 也可以是一个正则表达式。")]),e._v(" "),a("p",[e._v("OK,key 相关的命令我们就介绍这么多，当然还有很多其他的，小伙伴们可以参考"),a("a",{attrs:{href:"http://www.redis.cn/commands.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),a("OutboundLink")],1),e._v("。小伙伴在看官方文档时，有什么问题欢迎留言讨论。")])])}),[],!1,null,null,null);t.default=r.exports}}]);