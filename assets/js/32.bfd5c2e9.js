(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{399:function(a,s,t){"use strict";t.r(s);var e=t(42),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("上篇文章我们对 MongoDB 中的查询操作做了简单介绍，本文我们继续来看更丰富的查询操作。")]),a._v(" "),t("h2",{attrs:{id:"null"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[a._v("#")]),a._v(" null")]),a._v(" "),t("p",[a._v("null 的查询稍微有点不同，假如我想查询 z 为 null 的数据，如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("db.sang_collect.find({z:null})\n")])])]),t("p",[a._v("这样不仅会查出 z 为 null 的文档，也会查出所有没有 z 字段的文档，如果只想查询 z 为 null 的字段，那就再多加一个条件，判断一下z这个字段存在不，如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("db.sang_collect.find({z:{$in:[null],$exists:true}})\n")])])]),t("h2",{attrs:{id:"正则表达式查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式查询"}},[a._v("#")]),a._v(" 正则表达式查询")]),a._v(" "),t("p",[a._v("使用正则表达式查询我们在前面也已经介绍过了，这里的正则表达式语法和 JavaScript 中的正则表达式语法一致，比如查询所有 key 为 x，value 以 hello 开始的文档且不区分大小写：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("db.sang_collec.find({x:/^(hello)(.[a-zA-Z0-9])+/i})\n")])])]),t("h2",{attrs:{id:"数组查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组查询"}},[a._v("#")]),a._v(" 数组查询")]),a._v(" "),t("p",[a._v("假设我有一个数据集如下：")]),a._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"_id"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" ObjectId("),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"59f1ad41e26b36b25bc605ae"')]),a._v(")"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"books"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" \n        "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"三国演义"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" \n        "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"红楼梦"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" \n        "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"水浒传"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("查询 books 中含有三国演义的文档，如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('db.sang_collect.find({books:"三国演义"})\n')])])]),t("p",[a._v("如果要查询既有三国演义又有红楼梦的文档，可以使用 $all，如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('db.sang_collect.find({books:{$all:["三国演义","红楼梦"]}})\n')])])]),t("p",[a._v("当然我们也可以使用精确匹配，比如查询 books 为 "),t("code",[a._v('"三国演义","红楼梦", "水浒传"')]),a._v(" 的数据，如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('db.sang_collect.find({books:["三国演义","红楼梦", "水浒传"]})\n')])])]),t("p",[a._v("不过这种就会一对一的精确匹配。")]),a._v(" "),t("p",[a._v("也可以按照下标匹配，比如我想查询数组中下标为 2 的项的为 "),t("code",[a._v('"水浒传"')]),a._v(" 的文档，如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('db.sang_collect.find({"books.2":"水浒传"})\n')])])]),t("p",[a._v("也可以按照数组长度来查询，比如我想查询数组长度为 3 的文档：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("db.sang_collect.find({books:{$size:3}})\n")])])]),t("p",[a._v("如果想查询数组中的前两条数据，可以使用 $slice，如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("db.sang_collect.find({},{books:{$slice:2}})\n")])])]),t("p",[a._v("注意这里要写在 find 的第二个参数的位置。2 表示数组中前两个元素，-2 表示从后往前数两个元素。也可以截取数组中间的元素，比如查询数组的第二个到第四个元素：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("db.sang_collect.find({},{books:{$slice:[1,3]}})\n")])])]),t("p",[a._v("数组中的与的问题也值得说一下，假设我有如下数据：")]),a._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"_id"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" ObjectId("),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"59f208bc7b00f982986c669c"')]),a._v(")"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"x"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" \n        "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" \n        "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("25.0")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("我想将数组中 value 取值在 (10,20) 之间的文档获取到，如下操作：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("db.sang_collect.find({x:{$lt:20,$gt:10}})\n")])])]),t("p",[a._v("此时上面这个文档虽然不满足条件却依然被查找出来了，因为 "),t("code",[a._v("5<20")]),a._v(" ，而 "),t("code",[a._v("25>10")]),a._v("，要解决这个问题，我们可以使用 $elemMatch，如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("db.sang_collect.find({x:{$elemMatch:{$lt:20,$gt:10}}})\n")])])]),t("p",[a._v("$elemMatch 要求 MongoDB 同时使用查询条件中的两个语句与一个数组元素进行比较。")]),a._v(" "),t("h2",{attrs:{id:"嵌套文档查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#嵌套文档查询"}},[a._v("#")]),a._v(" 嵌套文档查询")]),a._v(" "),t("p",[a._v("嵌套文档有两种查询方式，比如我的数据如下：")]),a._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"_id"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" ObjectId("),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"59f20c9b7b00f982986c669f"')]),a._v(")"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"x"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"y"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"z"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2.0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"k"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.0")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("想要查询上面这个文档，我的查询语句如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("db.sang_collect.find({y:{z:2,k:3}})\n")])])]),t("p",[a._v("但是这种写法要求严格匹配，顺序都不能变，假如写成了 "),t("code",[a._v("db.sang_collect.find({y:{k:3,z:2}})")]),a._v("，就匹配不到了，因此这种方法不够灵活，我们一般推荐的是下面这种写法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('db.sang_collect.find({"y.z":2,"y.k":3})\n')])])]),t("p",[a._v("这种写法可以任意颠倒顺序。")]),a._v(" "),t("p",[a._v("好了，MongoDB 中的查询操作还是非常丰富的，本文我们先说到这里，下篇文章我们介绍游标，小伙伴们有问题欢迎留言讨论。")]),a._v(" "),t("p",[a._v("参考资料：")]),a._v(" "),t("ol",[t("li",[a._v("《MongoDB权威指南第2版》")])])])}),[],!1,null,null,null);s.default=n.exports}}]);