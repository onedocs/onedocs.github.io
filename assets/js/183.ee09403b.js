(window.webpackJsonp=window.webpackJsonp||[]).push([[183],{477:function(a,e,v){"use strict";v.r(e);var n=v(42),t=Object(n.a)({},(function(){var a=this,e=a.$createElement,v=a._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h2",{attrs:{id:"_1-1-为什么使用-maven"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-为什么使用-maven"}},[a._v("#")]),a._v(" 1.1 为什么使用 Maven")]),a._v(" "),v("p",[a._v("由于 Java 的生态非常丰富，无论你想实现什么功能，都能找到对应的工具类，这些工具类都是以 jar 包的形式出现的，例如 Spring，SpringMVC、MyBatis、数据库驱动，等等，都是以 jar 包的形式出现的，jar 包之间会有关联，在使用一个依赖之前，还需要确定这个依赖所依赖的其他依赖，所以，当项目比较大的时候，依赖管理会变得非常麻烦臃肿，这是 Maven 解决的第一个问题。")]),a._v(" "),v("p",[a._v("Maven 还可以处理多模块项目。简单的项目，单模块分包处理即可，如果项目比较复杂，要做成多模块项目，例如一个电商项目有订单模块、会员模块、商品模块、支付模块...，一般来说，多模块项目，每一个模块无法独立运行，要多个模块合在一起，项目才可以运行，这个时候，借助 Maven 工具，可以实现项目的一键打包。")]),a._v(" "),v("blockquote",[v("p",[a._v("Maven 之前，我们更多的是使用 Ant 的项目构建工具，Ant 有一个特点，每次都得写，每次都写的差不多，配置也臃肿。所以，后来搞出来 Maven。Maven 就是最先进的版本构建工具吗？不是的，只不过，目前在 Java 领域 Maven 使用比较多。除了 Maven，还有 Gradle。")])]),a._v(" "),v("h2",{attrs:{id:"_1-2-maven-是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-maven-是什么"}},[a._v("#")]),a._v(" 1.2 Maven 是什么")]),a._v(" "),v("p",[a._v("Maven 是一个项目管理工具，它包含了一个项目对象模型（Project Object Model），反映在配置中，就是一个 pom.xml 文件。是一组标准集合，一个项目的生命周期、一个依赖管理系统，另外还包括定义在项目生命周期阶段的插件(plugin)以及目标(goal)。")]),a._v(" "),v("p",[a._v("当我们使用 Maven 的使用，通过一个自定义的项目对象模型，pom.xml 来详细描述我们自己的项目。")]),a._v(" "),v("p",[a._v("Maven 中的有两大核心：")]),a._v(" "),v("ul",[v("li",[a._v("依赖管理：对 jar 的统一管理(Maven 提供了一个 Maven 的中央仓库，https://mvnrepository.com/，当我们在项目中添加完依赖之后，Maven 会自动去中央仓库下载相关的依赖，并且解决依赖的依赖问题)")]),a._v(" "),v("li",[a._v("项目构建：对项目进行编译、测试、打包、部署、上传到私服等")])])])}),[],!1,null,null,null);e.default=t.exports}}]);