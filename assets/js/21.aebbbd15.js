(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{388:function(t,v,_){"use strict";_.r(v);var r=_(42),a=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[t._v("Git 强大的撤销、版本回退功能，让我们在开发的过程中能够随意的回到任何一个时间点的状态，本文我们就来看看 Git 中的各种后悔药!")]),t._v(" "),_("p",[t._v("本文是Git系列的第三篇，了解前面的文章有助于更好的理解本文：")]),t._v(" "),_("hr"),t._v(" "),_("p",[t._v("1."),_("a",{attrs:{href:"https://mp.weixin.qq.com/s/3RheAJ9LYKK5BnVr331h5A",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 概述"),_("OutboundLink")],1),_("br"),t._v("\n2."),_("a",{attrs:{href:"https://mp.weixin.qq.com/s/S1T4wy3srmLvXgIjvpVEwg",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 基本操作"),_("OutboundLink")],1)]),t._v(" "),_("hr"),t._v(" "),_("p",[t._v("本文将从如下三个方面介绍 Git 中的后悔药：")]),t._v(" "),_("ol",[_("li",[t._v("工作区的代码想撤销")]),t._v(" "),_("li",[t._v("add 到暂存区的代码想撤销")]),t._v(" "),_("li",[t._v("提交到本地仓库的代码想撤销")])]),t._v(" "),_("p",[t._v("提交到远程仓库的后悔药我们统一都在关联远程仓库一文中讲解，敬请期待。")]),t._v(" "),_("h2",{attrs:{id:"工作区的代码想撤销"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#工作区的代码想撤销"}},[t._v("#")]),t._v(" 工作区的代码想撤销")]),t._v(" "),_("p",[t._v("可能有一天我正在写代码，写了很久发现写错了，想恢复到一开始的状态，一个笨办法就是把刚刚写的代码一行一行的删除，不过这种方式成本太高，我们可以通过 "),_("code",[t._v("git checkout -- <file>")]),t._v(" 命令来撤销工作区的代码修改。如下图：")]),t._v(" "),_("p",[_("img",{attrs:{src:"http://www.javaboy.org/images/git/p182.gif",alt:"p182"}})]),t._v(" "),_("p",[t._v("首先我们执行了 git status 命令，发现工作区是干净的，然后执行了 cat 命令，发现文件只有两行内容，然后通过 vi 编辑器向文件中添加一行，保存并退出，退出来之后又执行了 git status 命令，此时工作区的状态已经发生变化，然后我们执行了 git checkout -- git01.txt 命令，表示撤销之前的操作，让 git01.txt 恢复到之前的状态，该命令执行成功之后，我们再执行 cat 命令发现文件内容已经恢复了，此时再执行 git status ，状态也恢复了。")]),t._v(" "),_("h2",{attrs:{id:"add-到暂存区的代码想撤销"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#add-到暂存区的代码想撤销"}},[t._v("#")]),t._v(" add 到暂存区的代码想撤销")]),t._v(" "),_("p",[t._v("如果想要撤销，但是代码已经提交到暂存区了，不用担心，也能撤销，分两个步骤：")]),t._v(" "),_("p",[t._v("1.将暂存区的代码撤销到工作区"),_("br"),t._v("\n2.将工作区的代码撤销(具体操作和'工作区的代码想撤销'一致)")]),t._v(" "),_("p",[t._v("将暂存区的代码撤销，我们可以使用 "),_("code",[t._v("git reset HEAD")]),t._v(" 命令来实现。如下图：")]),t._v(" "),_("p",[_("img",{attrs:{src:"http://www.javaboy.org/images/git/p183.gif",alt:"p183"}})]),t._v(" "),_("p",[t._v("这里的代码都比较简单，核心的过程就是先执行 "),_("code",[t._v("git reset HEAD")]),t._v(" 命令，从暂存区撤销，剩下的操作参考'工作区的代码想撤销'一节。")]),t._v(" "),_("h2",{attrs:{id:"提交到本地仓库的代码想撤销"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提交到本地仓库的代码想撤销"}},[t._v("#")]),t._v(" 提交到本地仓库的代码想撤销")]),t._v(" "),_("p",[t._v("同样的，提交到本地仓库的代码一样也可以撤销，我们可以利用 "),_("code",[t._v("git reset --hard <版本号>")]),t._v(" 命令来实现版本回退，该命令中的版本号有几种不同的写法：")]),t._v(" "),_("blockquote",[_("p",[t._v("1.可以使用 HEAD^ 来描述版本，一个 ^ 表示前一个版本，两个 ^^ 表示前两个版本，以此类推。"),_("br"),t._v("\n2.也可以使用数字来代替 ^ ，比如说前 100 个版本可以写作 HEAD~100 。"),_("br"),t._v("\n3.也可以直接写版本号，表示跳转到某一个版本处。我们每次提交成功后，都会生成一个哈希码作为版本号，所以这里我们也可以直接填版本号，哈希码很长，但是我们不用全部输入，只需要输入前面几个字符即可，就能识别出来。")])]),t._v(" "),_("p",[t._v("看下面一系列的操作：")]),t._v(" "),_("p",[t._v("1.通过 git log 查看当前提交日志：")]),t._v(" "),_("p",[_("img",{attrs:{src:"http://www.javaboy.org/images/git/p184.png",alt:"p184"}})]),t._v(" "),_("p",[t._v("2.通过 git reset HEAD^^ 向前回退两个版本：")]),t._v(" "),_("p",[_("img",{attrs:{src:"http://www.javaboy.org/images/git/p185.png",alt:"p185"}})]),t._v(" "),_("p",[t._v("3.查看日志，发现最后一次提交的版本号是 695ce1fe ,利用 git reset --hard 695ce1fe 命令回到回退之前的状态：")]),t._v(" "),_("p",[_("img",{attrs:{src:"http://www.javaboy.org/images/git/p186.png",alt:"p186"}})]),t._v(" "),_("p",[t._v("4.通过 git reset --hard HEAD~1 回到上一个版本：")]),t._v(" "),_("p",[_("img",{attrs:{src:"http://www.javaboy.org/images/git/p187.png",alt:"p187"}})]),t._v(" "),_("p",[t._v("好了，Git 中的后悔药我们就先介绍到这里，有问题欢迎留言讨论。")]),t._v(" "),_("p",[t._v("参考资料：")]),t._v(" "),_("p",[t._v("1.《GitHub入门与实践》"),_("br"),t._v("\n2.《Pro Git》")])])}),[],!1,null,null,null);v.default=a.exports}}]);