(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{389:function(t,i,a){"use strict";a.r(i);var s=a(42),e=Object(s.a)({},(function(){var t=this,i=t.$createElement,a=t._self._c||i;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("一直以来想出一个 Git 的教程，去年写过一篇，后来没了下文，烂尾了。最近忙里偷闲，还是想把这个 Git 系列写一遍，这次争取写完。")]),t._v(" "),a("p",[t._v("本文我主要想先简单介绍下Git，然后介绍下 Git 的安装。")]),t._v(" "),a("p",[t._v("毫无疑问， Git 是目前最优秀的分布式版本控制工具，木有之一，可是我见到的很多人还是不会用，我的老东家每天忍受着 SVN 带来的痛苦，却迟迟不愿切换到 Git 上，个人感觉，许多中小公司不用 Git ，不是因为 Git 不好，而是他们的项目经理不会用（逃。")]),t._v(" "),a("p",[t._v("OK，那么今天我们就先来简单介绍下 Git 的发展史以及 Git 的优点，然后再来看看 Git 的安装。")]),t._v(" "),a("h2",{attrs:{id:"git诞生记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git诞生记"}},[t._v("#")]),t._v(" Git诞生记")]),t._v(" "),a("p",[t._v("Git 诞生于 2005 年 4 月，由 Linux 的作者 Linus Torvalds 花费了两周的时间用 C 写了一个分布式版本控制系统，这就是 Git1.0 ，大牛写代码就是这么 666666 。")]),t._v(" "),a("p",[t._v("其实早在 Git 之前，这个世界就已经有一些非常流行的版本控制工具 （VCS） ，比如 CVS ，SVN，ClearCase 等，然而这些工具要么运行慢，要么要收费，都不是 Linus Torvalds 的菜。")]),t._v(" "),a("p",[t._v("当时，有一个公司叫做 BitMover ，该公司有一款产品叫做 BitKeeper ，这是一个分布式版本控制工具，但是这是收费的，不过这是一个有情怀的公司，老板 Larry 说服 Linus Torvalds 使用 BitKeeper 来管理 Linux 内核源码，于是，在 2002 到 2005 年之间，Linux 内核开发团队一直使用 BitKeeper 来管理 Linux 源码。")]),t._v(" "),a("p",[t._v("可是在开发的过程中， Linus Torvalds 有一个叫做安德鲁·垂鸠的小伙伴不安分了，他写了一个简单程序，可以连接 BitKeeper 的存储库，BitKeeper 著作权拥有者拉里·麦沃伊认为安德鲁·垂鸠对 BitKeeper 内部使用的协议进行逆向工程，决定收回无偿使用 BitKeeper 的授权。")]),t._v(" "),a("p",[t._v("合作无法继续，于是 Linus Torvalds 决定自己开发一套分布式版本控制工具，就是 Git ，至于这个分布式版本控制工具为什么叫 Git，Linus Torvalds 并没有给出一个让所有人满意的解释，倒是很多开发者一直尝试去给 Git 一个合理的解释，常见的一个解释就是 Global Information Tracker （中文译作全局信息追踪器）。")]),t._v(" "),a("p",[t._v("如果当年不是 BitMover 公司的逼迫，估计我们还不一定见到这么优秀的分布式版本控制工具。值得一说的是， 2016 年 5 月 11 日 BitKeeper 宣布以 Apache 2.0 许可证开源（新闻链接http://www.solidot.org/story?sid=48171），我很好奇 BitKeeper 宣布开源的时候他的老板心中是何感受？")]),t._v(" "),a("h2",{attrs:{id:"git的优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git的优势"}},[t._v("#")]),t._v(" Git的优势")]),t._v(" "),a("p",[t._v("Git 一出世立马就成为最流行的分布式版本控制工具，2008 年 4 月，GitHub 正式上线，GitHub 是一个利用 Git 进行版本控制，专门用于存放代码与内容的共享虚拟主机服务，GitHub 上线之后，许多开源项目都移植到 GitHub 上了，不管你从事那门语言的研发，都会在 GitHub 上找到你需要的项目吧！OK，说了这么多，接下来我们也该说说 Git 这个分布式版本控制工具的优势了。Git 主要有以下几个优势：")]),t._v(" "),a("ol",[a("li",[t._v("与传统的集中式版本控制工具不同，分布式版本控制工具不需要联网就可以工作，每台电脑都是一个完整的版本仓库。")]),t._v(" "),a("li",[t._v("Git 可以胜任上万人的开发规模，这个大家看看 GitHub 中的开源项目就知道了，不需要我多说。")]),t._v(" "),a("li",[t._v("性能优异。我们前面说过 Linus Torvalds 之所以不愿意使用 CVS、SVN 等版本控制工具就是因为这些工具的性能太差。所以 Linus Torvalds 在开发 Git 时就决定要革除积弊，确保 Git 的运行效率。笔者在上家公司做开发时，深受 SVN 的毒害，但是公司还是不愿意迁移到 Git 上，我猜测是由于项目经理不会用。")]),t._v(" "),a("li",[t._v("保证项目的安全。我们知道，在 SVN 之前还有一个集中式版本控制工具叫做 CVS ，这个 CVS 有一个问题，就是你的文件有的时候会莫名其妙的丢失，做开发的各位筒子都知道，如果你的项目中突然有一个文件不见了，你不出一身汗才怪。所以，Git 使用 SHA1 这种通用的加密散列函数来对数据库中的对象进行命名，从而来确保文件的安全。")]),t._v(" "),a("li",[t._v("好用的分支。用过 Git 的人都知道 Git 中的分支用起来有多么爽，分支在我们的项目中用的非常普遍，可是 SVN 虽然也有分支，但是却不能像 Git 用的这么爽。这个做过项目的筒子都知道。我们到后文会给大家详细介绍分支的用法。")])]),t._v(" "),a("p",[t._v("OK，Git 的优势还有很多种，这里我就不再一一列举了，有兴趣的大家自行搜索。")]),t._v(" "),a("h2",{attrs:{id:"git-的安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-的安装"}},[t._v("#")]),t._v(" Git 的安装")]),t._v(" "),a("p",[t._v("作为一个屌丝码农，我的本子还是 windows ,不过我的本本装了双系统，所以我这里就只给大家演示一下 Windows 下如何安装 Git 以及 Ubuntu 下如何安装 Git。")]),t._v(" "),a("h3",{attrs:{id:"windows7-安装-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#windows7-安装-git"}},[t._v("#")]),t._v(" windows7 安装 Git")]),t._v(" "),a("p",[t._v("windows 安装 Git 整体上来说有两种解决方案")]),t._v(" "),a("ol",[a("li",[t._v("安装Cygwin（下载地址http://cygwin.com/）用来模拟Linux运行环境，但是Cygwin大配置非常麻烦，容易出错，所以一般不推荐这种方式。")]),t._v(" "),a("li",[t._v("安装独立的Git，也就是msysGit（下载地址https://git-for-windows.github.io/），这就是一个简单的exe文件，一路next就安装成功了。安装成功后，在你的开始菜单中找到Git Bash，点击Git Bash，输入git --version查看git版本号，运行界面如下：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://www.javaboy.org/images/git/p164.png",alt:"p164"}})]),t._v(" "),a("h3",{attrs:{id:"ubuntu-安装-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu-安装-git"}},[t._v("#")]),t._v(" Ubuntu 安装 Git")]),t._v(" "),a("p",[t._v("ubuntu 安装 Git 就是一句话:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sudo apt-get install git  \n")])])]),a("p",[t._v("早期的 Linux 版本直接运行下面的代码即可：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("sudo apt-get install git-core  \n")])])]),a("p",[t._v("安装成功之后，输入 git --version 查看 git 版本号。")]),t._v(" "),a("h3",{attrs:{id:"基本配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本配置"}},[t._v("#")]),t._v(" 基本配置")]),t._v(" "),a("p",[t._v("不管是 Windows 安装还是 Linux 安装，安装好之后，我们都先通过如下两行命令做一个基本配置,配置的信息将展示在我们每一次提交的后面，所以不要使用不方便公开的信息，如果不配置以后每次提交的时候都会让你输入用户名和密码，配置方式如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git config --global user.name "zhangsan"    \n$ git config --global user.email "111@qq.com"\n')])])]),a("p",[t._v("这个配置会保存在当前用户目录下的 "),a("code",[t._v(".gitconfig")]),t._v(" 文件中，如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://www.javaboy.org/images/git/p165.png",alt:"p165"}})]),t._v(" "),a("p",[t._v("OK，本文我们就先说到这里，有问题欢迎留言讨论。")]),t._v(" "),a("p",[t._v("参考资料：")]),t._v(" "),a("p",[t._v("1.《GitHub入门与实践》"),a("br"),t._v("\n2.《Pro Git》")])])}),[],!1,null,null,null);i.default=e.exports}}]);