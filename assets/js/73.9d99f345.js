(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{535:function(e,r,t){"use strict";t.r(r);var a=t(42),s=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("主从的搭建差不多说完了，本文我们来看看集群如何搭建。")]),e._v(" "),t("p",[e._v("本文是 Redis 系列的第十二篇文章，了解前面的文章有助于更好的理解本文：")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("1."),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/NCm3zNGIDVMnlykeOiaH7Q",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux 上安装 Redis"),t("OutboundLink")],1),t("br"),e._v("\n2."),t("a",{attrs:{href:"http://mp.weixin.qq.com/s/jNSN8YO4jZbyjKR5C4in_w",target:"_blank",rel:"noopener noreferrer"}},[e._v("Redis 中的五种数据类型简介"),t("OutboundLink")],1),t("br"),e._v("\n3."),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/Svvgwo_a92vNdCSazbzKRQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("Redis 字符串 (STRING) 介绍"),t("OutboundLink")],1),t("br"),e._v("\n4."),t("a",{attrs:{href:"http://mp.weixin.qq.com/s/OGUnTBmdErvZ8r_yoyg_rQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("Redis 字符串 (STRING) 中 BIT 相关命令"),t("OutboundLink")],1),t("br"),e._v("\n5."),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/C07AJhRk8AvPeKxSUq8lGA",target:"_blank",rel:"noopener noreferrer"}},[e._v("Redis 列表与集合"),t("OutboundLink")],1),t("br"),e._v("\n6."),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/9KlDOJlY7ZEoLEGUyDNxRg",target:"_blank",rel:"noopener noreferrer"}},[e._v("Redis 散列与有序集合"),t("OutboundLink")],1),t("br"),e._v("\n7."),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/5z8IZsB_nEJXELis9e5JWQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("Redis 中的发布订阅和事务"),t("OutboundLink")],1),t("br"),e._v("\n8."),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/nsFVwQUc_YB1QcxYo10o-g",target:"_blank",rel:"noopener noreferrer"}},[e._v("Redis 快照持久化"),t("OutboundLink")],1),t("br"),e._v("\n9."),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/CLEd7XuPmjHpqLmQaVvklQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("Redis 之 AOF 持久化"),t("OutboundLink")],1),t("br"),e._v("\n10."),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/TxVsMhRXZiVPhruzh9bOAA",target:"_blank",rel:"noopener noreferrer"}},[e._v("Redis 主从复制(一)"),t("OutboundLink")],1),t("br"),e._v("\n11."),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/TvIxovAi6XfR7RGigtHRtQ",target:"_blank",rel:"noopener noreferrer"}},[e._v("Redis 主从复制(二)"),t("OutboundLink")],1)]),e._v(" "),t("hr"),e._v(" "),t("h1",{attrs:{id:"集群原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群原理"}},[e._v("#")]),e._v(" 集群原理")]),e._v(" "),t("p",[e._v("Redis 集群架构如下图：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.javaboy.org/images/redis/p317.png",alt:""}})]),e._v(" "),t("p",[e._v("Redis 集群运行原理如下：")]),e._v(" "),t("ol",[t("li",[e._v("所有的 Redis 节点彼此互联( PING-PONG 机制),内部使用二进制协议优化传输速度和带宽")]),e._v(" "),t("li",[e._v("节点的 fail 是通过集群中超过半数的节点检测失效时才生效")]),e._v(" "),t("li",[e._v("客户端与 Redis 节点直连,不需要中间 proxy 层，客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可")]),e._v(" "),t("li",[e._v("Redis-cluster 把所有的物理节点映射到 [0-16383] slot 上, cluster (簇)负责维护 "),t("code",[e._v("node<->slot<->value")]),e._v(" 。Redis 集群中内置了 16384 个哈希槽，当需要在 Redis 集群中放置一个 key-value 时，Redis 先对 key 使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，Redis 会根据节点数量大致均等的将哈希槽映射到不同的节点")])]),e._v(" "),t("h2",{attrs:{id:"怎么样投票"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#怎么样投票"}},[e._v("#")]),e._v(" 怎么样投票")]),e._v(" "),t("p",[e._v("投票过程是集群中所有 master 参与,如果半数以上 master 节点与 master 节点通信超过 "),t("code",[e._v("cluster-node-timeout")]),e._v(" 设置的时间,认为当前 master 节点挂掉。")]),e._v(" "),t("h2",{attrs:{id:"怎么样判定节点不可用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#怎么样判定节点不可用"}},[e._v("#")]),e._v(" 怎么样判定节点不可用")]),e._v(" "),t("p",[e._v("1.如果集群任意 master 挂掉,且当前 master 没有 slave， 集群进入 fail 状态,也可以理解成集群的 slot 映射 [0-16383] 不完整时进入 fail 状态。"),t("br"),e._v("\n2.如果集群超过半数以上 master 挂掉，无论是否有 slave ,集群进入 fail 状态，当集群不可用时,所有对集群的操作做都不可用，收到 ((error) CLUSTERDOWN The cluster is down) 错误。")]),e._v(" "),t("h1",{attrs:{id:"ruby-环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ruby-环境"}},[e._v("#")]),e._v(" ruby 环境")]),e._v(" "),t("p",[e._v("Redis 集群管理工具 redis-trib.rb 依赖 ruby 环境，首先需要安装 ruby 环境：")]),e._v(" "),t("p",[e._v("安装 ruby:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("yum install ruby\nyum install rubygems\n")])])]),t("p",[e._v("但是这种安装方式装好的 ruby 版本可能不适用，如果安装失败，可以参考这篇文章解决 "),t("a",{attrs:{href:"https://blog.csdn.net/fengye_yulu/article/details/77628094",target:"_blank",rel:"noopener noreferrer"}},[e._v("redis requires Ruby version >= 2.2.2"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("h1",{attrs:{id:"集群搭建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集群搭建"}},[e._v("#")]),e._v(" 集群搭建")]),e._v(" "),t("p",[e._v("首先我们对集群做一个简单规划，假设我的集群中一共有三个节点，每个节点一个主机一个从机，这样我一共需要 6 个 Redis 实例。首先创建 redis-cluster 文件夹，在该文件夹下分别创建 7001、7002、7003、7004、7005、7006 文件夹，用来存放我的 Redis 配置文件，如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.javaboy.org/images/redis/p323.png",alt:""}})]),e._v(" "),t("p",[e._v("将 Redis 也在 redis-cluster 目录下安装一份，然后将 redis.conf 文件向 7001-7006 这 6 个文件夹中分别拷贝一份，拷贝完成后，分别修改如下参数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("port 7001\n#bind 127.0.0.1\ncluster-enabled yes\ncluster-config-XX  XXX7001.conf\nprotected no\ndaemonize yes\n")])])]),t("p",[e._v("这是 7001 目录下的配置，其他的文件夹将 7001 改为对应的数字即可。修改完成后，进入到 redis 安装目录中，分别启动各个 redis ，使用刚刚修改过的配置文件，如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.javaboy.org/images/redis/p318.png",alt:""}})]),e._v(" "),t("p",[e._v("启动成功后，我们可以查看 redis 进程，如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.javaboy.org/images/redis/p319.png",alt:""}})]),e._v(" "),t("p",[e._v("这个表示各个节点都启动成功了。接下来我们就可以进行集群的创建了，首先将 redis/src 目录下的 redis-trib.rb 文件拷贝到 redis-cluster 目录下，然后在 redis-cluster 目录下执行如下命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("./redis-trib.rb create --replicas 1 192.168.248.128:7001 192.168.248.128:7002 192.168.248.128:7003 192.168.248.128:7004 192.168.248.128:7005 192.168.248.128:7006\n")])])]),t("p",[e._v("注意，replicas 后面的 1 表示每个主机都带有 1 个从机，执行过程如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.javaboy.org/images/redis/p320.png",alt:""}})]),e._v(" "),t("p",[e._v("注意创建过程的日志，每个 redis 都获得了一个编号，同时日志也说明了哪些实例做主机，哪些实例做从机，每个从机的主机是谁，每个主机所分配到的 hash 槽范围等等。")]),e._v(" "),t("h1",{attrs:{id:"查询集群信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询集群信息"}},[e._v("#")]),e._v(" 查询集群信息")]),e._v(" "),t("p",[e._v("集群创建成功后，我们可以登录到 Redis 控制台查看集群信息，注意登录时要添加 "),t("code",[e._v("-c")]),e._v(" 参数，表示以集群方式连接，如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.javaboy.org/images/redis/p321.png",alt:""}})]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.javaboy.org/images/redis/p322.png",alt:""}})]),e._v(" "),t("h1",{attrs:{id:"添加主节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加主节点"}},[e._v("#")]),e._v(" 添加主节点")]),e._v(" "),t("p",[e._v("首先我们准备一个端口为 7007 的主节点并启动，准备方式和前面步骤一样，启动成功后，通过如下命令添加主节点：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("./redis-trib.rb add-node  127.0.0.1:7007 127.0.0.1:7001\n")])])]),t("p",[e._v("主节点添加之后，我们可以通过 cluster nodes 命令查看主节点是否添加成功，此时我们发现新添加的节点没有分配到 slot ，如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.javaboy.org/images/redis/p324.png",alt:""}})]),e._v(" "),t("p",[e._v("没有分配到 slot 将不能存储数据，此时我们需要手动分配 slot，分配命令如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("./redis-trib.rb reshard 127.0.0.1:7001\n")])])]),t("p",[e._v("后面的地址为任意一个节点地址，在分配的过程中，我们一共要输入如下几个参数：")]),e._v(" "),t("p",[e._v("1.一共要划分多少个 hash 槽出来？就是我们总共要给新添加的节点分多少 hash 槽，这个参数依实际情况而定，如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.javaboy.org/images/redis/p325.png",alt:""}})]),e._v(" "),t("p",[e._v("2.这些划分出来的槽要给谁，这里输入 7007 节点的编号，如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.javaboy.org/images/redis/p326.png",alt:"p326"}})]),e._v(" "),t("p",[e._v("3.要让谁出血？因为 hash 槽目前已经全部分配完毕，要重新从已经分好的节点中拿出来一部分给 7007 ，必然要让另外三个节点把吃进去的吐出来，这里我们可以输入多个节点的编号，每次输完一个点击回车，输完所有的输入 done 表示输入完成，这样就让这几个节点让出部分 slot，如果要让所有具有 slot 的节点都参与到此次 slot 重新分配的活动中，那么这里直接输入 all 即可，如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.javaboy.org/images/redis/p327.png",alt:""}})]),e._v(" "),t("p",[e._v("OK，主要就是这几个参数，输完之后进入到 slot 重新分配环节，分配完成后，通过 cluster nodes 命令，我们可以发现 7007 已经具有 slot 了，如下：")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://www.javaboy.org/images/redis/p328.png",alt:""}})]),e._v(" "),t("p",[e._v("OK,刚刚我们是添加主节点，我们也可以添加从节点，比如我要把 7008 作为 7007 的从节点，添加方式如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("./redis-trib.rb add-node --slave --master-id 79bbb30bba66b4997b9360dd09849c67d2d02bb9  192.168.31.135:7008 192.168.31.135:7007\n")])])]),t("p",[e._v("其中 79bbb30bba66b4997b9360dd09849c67d2d02bb9 是 7007 的编号。")]),e._v(" "),t("h1",{attrs:{id:"删除节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除节点"}},[e._v("#")]),e._v(" 删除节点")]),e._v(" "),t("p",[e._v("删除节点也比较简单，如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("./redis-trib.rb del-node 127.0.0.1:7005 4b45eb75c8b428fbd77ab979b85080146a9bc017\n")])])]),t("p",[e._v("注意 4b45eb75c8b428fbd77ab979b85080146a9bc017 是要删除节点的编号。")]),e._v(" "),t("p",[e._v("再注意：删除已经占有 hash 槽的结点会失败，报错如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[ERR] Node 127.0.0.1:7005 is not empty! Reshard data away and try again.\n")])])]),t("p",[e._v("需要将该结点占用的 hash 槽分配出去（分配方式与上文一致，不赘述）。")]),e._v(" "),t("p",[e._v("好了，redis 集群搭建我们先说这么多，有问题欢迎留言讨论。")])])}),[],!1,null,null,null);r.default=s.exports}}]);